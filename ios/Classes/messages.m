// Autogenerated from Pigeon (v0.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString*, id>* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface NEFLTIntValue ()
+(NEFLTIntValue*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTSetVideoRendererMirrorRequest ()
+(NEFLTSetVideoRendererMirrorRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTSetupRemoteVideoRendererRequest ()
+(NEFLTSetupRemoteVideoRendererRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTSetupRemoteSubStreamVideoRendererRequest ()
+(NEFLTSetupRemoteSubStreamVideoRendererRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTStartAudioMixingRequest ()
+(NEFLTStartAudioMixingRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTPlayEffectRequest ()
+(NEFLTPlayEffectRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTSetEffectSendVolumeRequest ()
+(NEFLTSetEffectSendVolumeRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTSetEffectPlaybackVolumeRequest ()
+(NEFLTSetEffectPlaybackVolumeRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTBoolValue ()
+(NEFLTBoolValue*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTDoubleValue ()
+(NEFLTDoubleValue*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTSetCameraFocusPositionRequest ()
+(NEFLTSetCameraFocusPositionRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTEnableEarbackRequest ()
+(NEFLTEnableEarbackRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTCreateEngineRequest ()
+(NEFLTCreateEngineRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTJoinChannelRequest ()
+(NEFLTJoinChannelRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTSubscribeRemoteAudioRequest ()
+(NEFLTSubscribeRemoteAudioRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTSetAudioProfileRequest ()
+(NEFLTSetAudioProfileRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTSetLocalVideoConfigRequest ()
+(NEFLTSetLocalVideoConfigRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTStartScreenCaptureRequest ()
+(NEFLTStartScreenCaptureRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTSubscribeRemoteVideoRequest ()
+(NEFLTSubscribeRemoteVideoRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTSubscribeRemoteSubStreamVideoRequest ()
+(NEFLTSubscribeRemoteSubStreamVideoRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTEnableAudioVolumeIndicationRequest ()
+(NEFLTEnableAudioVolumeIndicationRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTAddOrUpdateLiveStreamTaskRequest ()
+(NEFLTAddOrUpdateLiveStreamTaskRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTDeleteLiveStreamTaskRequest ()
+(NEFLTDeleteLiveStreamTaskRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTSendSEIMsgRequest ()
+(NEFLTSendSEIMsgRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTSetLocalVoiceEqualizationRequest ()
+(NEFLTSetLocalVoiceEqualizationRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTSwitchChannelRequest ()
+(NEFLTSwitchChannelRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTStartAudioRecordingRequest ()
+(NEFLTStartAudioRecordingRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTSetLocalMediaPriorityRequest ()
+(NEFLTSetLocalMediaPriorityRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTStartOrUpdateChannelMediaReplayRequest ()
+(NEFLTStartOrUpdateChannelMediaReplayRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTAdjustUserPlaybackSignalVolumeRequest ()
+(NEFLTAdjustUserPlaybackSignalVolumeRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface NEFLTEnableEncryptionRequest ()
+(NEFLTEnableEncryptionRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation NEFLTIntValue
+(NEFLTIntValue*)fromMap:(NSDictionary*)dict {
  NEFLTIntValue* result = [[NEFLTIntValue alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation NEFLTSetVideoRendererMirrorRequest
+(NEFLTSetVideoRendererMirrorRequest*)fromMap:(NSDictionary*)dict {
  NEFLTSetVideoRendererMirrorRequest* result = [[NEFLTSetVideoRendererMirrorRequest alloc] init];
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  result.mirror = dict[@"mirror"];
  if ((NSNull *)result.mirror == [NSNull null]) {
    result.mirror = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.textureId ? self.textureId : [NSNull null]), @"textureId", (self.mirror ? self.mirror : [NSNull null]), @"mirror", nil];
}
@end

@implementation NEFLTSetupRemoteVideoRendererRequest
+(NEFLTSetupRemoteVideoRendererRequest*)fromMap:(NSDictionary*)dict {
  NEFLTSetupRemoteVideoRendererRequest* result = [[NEFLTSetupRemoteVideoRendererRequest alloc] init];
  result.uid = dict[@"uid"];
  if ((NSNull *)result.uid == [NSNull null]) {
    result.uid = nil;
  }
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.uid ? self.uid : [NSNull null]), @"uid", (self.textureId ? self.textureId : [NSNull null]), @"textureId", nil];
}
@end

@implementation NEFLTSetupRemoteSubStreamVideoRendererRequest
+(NEFLTSetupRemoteSubStreamVideoRendererRequest*)fromMap:(NSDictionary*)dict {
  NEFLTSetupRemoteSubStreamVideoRendererRequest* result = [[NEFLTSetupRemoteSubStreamVideoRendererRequest alloc] init];
  result.uid = dict[@"uid"];
  if ((NSNull *)result.uid == [NSNull null]) {
    result.uid = nil;
  }
  result.textureId = dict[@"textureId"];
  if ((NSNull *)result.textureId == [NSNull null]) {
    result.textureId = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.uid ? self.uid : [NSNull null]), @"uid", (self.textureId ? self.textureId : [NSNull null]), @"textureId", nil];
}
@end

@implementation NEFLTStartAudioMixingRequest
+(NEFLTStartAudioMixingRequest*)fromMap:(NSDictionary*)dict {
  NEFLTStartAudioMixingRequest* result = [[NEFLTStartAudioMixingRequest alloc] init];
  result.path = dict[@"path"];
  if ((NSNull *)result.path == [NSNull null]) {
    result.path = nil;
  }
  result.loopCount = dict[@"loopCount"];
  if ((NSNull *)result.loopCount == [NSNull null]) {
    result.loopCount = nil;
  }
  result.sendEnabled = dict[@"sendEnabled"];
  if ((NSNull *)result.sendEnabled == [NSNull null]) {
    result.sendEnabled = nil;
  }
  result.sendVolume = dict[@"sendVolume"];
  if ((NSNull *)result.sendVolume == [NSNull null]) {
    result.sendVolume = nil;
  }
  result.playbackEnabled = dict[@"playbackEnabled"];
  if ((NSNull *)result.playbackEnabled == [NSNull null]) {
    result.playbackEnabled = nil;
  }
  result.playbackVolume = dict[@"playbackVolume"];
  if ((NSNull *)result.playbackVolume == [NSNull null]) {
    result.playbackVolume = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.path ? self.path : [NSNull null]), @"path", (self.loopCount ? self.loopCount : [NSNull null]), @"loopCount", (self.sendEnabled ? self.sendEnabled : [NSNull null]), @"sendEnabled", (self.sendVolume ? self.sendVolume : [NSNull null]), @"sendVolume", (self.playbackEnabled ? self.playbackEnabled : [NSNull null]), @"playbackEnabled", (self.playbackVolume ? self.playbackVolume : [NSNull null]), @"playbackVolume", nil];
}
@end

@implementation NEFLTPlayEffectRequest
+(NEFLTPlayEffectRequest*)fromMap:(NSDictionary*)dict {
  NEFLTPlayEffectRequest* result = [[NEFLTPlayEffectRequest alloc] init];
  result.effectId = dict[@"effectId"];
  if ((NSNull *)result.effectId == [NSNull null]) {
    result.effectId = nil;
  }
  result.path = dict[@"path"];
  if ((NSNull *)result.path == [NSNull null]) {
    result.path = nil;
  }
  result.loopCount = dict[@"loopCount"];
  if ((NSNull *)result.loopCount == [NSNull null]) {
    result.loopCount = nil;
  }
  result.sendEnabled = dict[@"sendEnabled"];
  if ((NSNull *)result.sendEnabled == [NSNull null]) {
    result.sendEnabled = nil;
  }
  result.sendVolume = dict[@"sendVolume"];
  if ((NSNull *)result.sendVolume == [NSNull null]) {
    result.sendVolume = nil;
  }
  result.playbackEnabled = dict[@"playbackEnabled"];
  if ((NSNull *)result.playbackEnabled == [NSNull null]) {
    result.playbackEnabled = nil;
  }
  result.playbackVolume = dict[@"playbackVolume"];
  if ((NSNull *)result.playbackVolume == [NSNull null]) {
    result.playbackVolume = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.effectId ? self.effectId : [NSNull null]), @"effectId", (self.path ? self.path : [NSNull null]), @"path", (self.loopCount ? self.loopCount : [NSNull null]), @"loopCount", (self.sendEnabled ? self.sendEnabled : [NSNull null]), @"sendEnabled", (self.sendVolume ? self.sendVolume : [NSNull null]), @"sendVolume", (self.playbackEnabled ? self.playbackEnabled : [NSNull null]), @"playbackEnabled", (self.playbackVolume ? self.playbackVolume : [NSNull null]), @"playbackVolume", nil];
}
@end

@implementation NEFLTSetEffectSendVolumeRequest
+(NEFLTSetEffectSendVolumeRequest*)fromMap:(NSDictionary*)dict {
  NEFLTSetEffectSendVolumeRequest* result = [[NEFLTSetEffectSendVolumeRequest alloc] init];
  result.effectId = dict[@"effectId"];
  if ((NSNull *)result.effectId == [NSNull null]) {
    result.effectId = nil;
  }
  result.volume = dict[@"volume"];
  if ((NSNull *)result.volume == [NSNull null]) {
    result.volume = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.effectId ? self.effectId : [NSNull null]), @"effectId", (self.volume ? self.volume : [NSNull null]), @"volume", nil];
}
@end

@implementation NEFLTSetEffectPlaybackVolumeRequest
+(NEFLTSetEffectPlaybackVolumeRequest*)fromMap:(NSDictionary*)dict {
  NEFLTSetEffectPlaybackVolumeRequest* result = [[NEFLTSetEffectPlaybackVolumeRequest alloc] init];
  result.effectId = dict[@"effectId"];
  if ((NSNull *)result.effectId == [NSNull null]) {
    result.effectId = nil;
  }
  result.volume = dict[@"volume"];
  if ((NSNull *)result.volume == [NSNull null]) {
    result.volume = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.effectId ? self.effectId : [NSNull null]), @"effectId", (self.volume ? self.volume : [NSNull null]), @"volume", nil];
}
@end

@implementation NEFLTBoolValue
+(NEFLTBoolValue*)fromMap:(NSDictionary*)dict {
  NEFLTBoolValue* result = [[NEFLTBoolValue alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation NEFLTDoubleValue
+(NEFLTDoubleValue*)fromMap:(NSDictionary*)dict {
  NEFLTDoubleValue* result = [[NEFLTDoubleValue alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation NEFLTSetCameraFocusPositionRequest
+(NEFLTSetCameraFocusPositionRequest*)fromMap:(NSDictionary*)dict {
  NEFLTSetCameraFocusPositionRequest* result = [[NEFLTSetCameraFocusPositionRequest alloc] init];
  result.x = dict[@"x"];
  if ((NSNull *)result.x == [NSNull null]) {
    result.x = nil;
  }
  result.y = dict[@"y"];
  if ((NSNull *)result.y == [NSNull null]) {
    result.y = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.x ? self.x : [NSNull null]), @"x", (self.y ? self.y : [NSNull null]), @"y", nil];
}
@end

@implementation NEFLTEnableEarbackRequest
+(NEFLTEnableEarbackRequest*)fromMap:(NSDictionary*)dict {
  NEFLTEnableEarbackRequest* result = [[NEFLTEnableEarbackRequest alloc] init];
  result.enabled = dict[@"enabled"];
  if ((NSNull *)result.enabled == [NSNull null]) {
    result.enabled = nil;
  }
  result.volume = dict[@"volume"];
  if ((NSNull *)result.volume == [NSNull null]) {
    result.volume = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.enabled ? self.enabled : [NSNull null]), @"enabled", (self.volume ? self.volume : [NSNull null]), @"volume", nil];
}
@end

@implementation NEFLTCreateEngineRequest
+(NEFLTCreateEngineRequest*)fromMap:(NSDictionary*)dict {
  NEFLTCreateEngineRequest* result = [[NEFLTCreateEngineRequest alloc] init];
  result.appKey = dict[@"appKey"];
  if ((NSNull *)result.appKey == [NSNull null]) {
    result.appKey = nil;
  }
  result.logDir = dict[@"logDir"];
  if ((NSNull *)result.logDir == [NSNull null]) {
    result.logDir = nil;
  }
  result.logLevel = dict[@"logLevel"];
  if ((NSNull *)result.logLevel == [NSNull null]) {
    result.logLevel = nil;
  }
  result.audioAutoSubscribe = dict[@"audioAutoSubscribe"];
  if ((NSNull *)result.audioAutoSubscribe == [NSNull null]) {
    result.audioAutoSubscribe = nil;
  }
  result.audioDisableOverrideSpeakerOnReceiver = dict[@"audioDisableOverrideSpeakerOnReceiver"];
  if ((NSNull *)result.audioDisableOverrideSpeakerOnReceiver == [NSNull null]) {
    result.audioDisableOverrideSpeakerOnReceiver = nil;
  }
  result.audioDisableSWAECOnHeadset = dict[@"audioDisableSWAECOnHeadset"];
  if ((NSNull *)result.audioDisableSWAECOnHeadset == [NSNull null]) {
    result.audioDisableSWAECOnHeadset = nil;
  }
  result.audioAINSEnabled = dict[@"audioAINSEnabled"];
  if ((NSNull *)result.audioAINSEnabled == [NSNull null]) {
    result.audioAINSEnabled = nil;
  }
  result.serverRecordAudio = dict[@"serverRecordAudio"];
  if ((NSNull *)result.serverRecordAudio == [NSNull null]) {
    result.serverRecordAudio = nil;
  }
  result.serverRecordVideo = dict[@"serverRecordVideo"];
  if ((NSNull *)result.serverRecordVideo == [NSNull null]) {
    result.serverRecordVideo = nil;
  }
  result.serverRecordMode = dict[@"serverRecordMode"];
  if ((NSNull *)result.serverRecordMode == [NSNull null]) {
    result.serverRecordMode = nil;
  }
  result.serverRecordSpeaker = dict[@"serverRecordSpeaker"];
  if ((NSNull *)result.serverRecordSpeaker == [NSNull null]) {
    result.serverRecordSpeaker = nil;
  }
  result.publishSelfStream = dict[@"publishSelfStream"];
  if ((NSNull *)result.publishSelfStream == [NSNull null]) {
    result.publishSelfStream = nil;
  }
  result.videoCaptureObserverEnabled = dict[@"videoCaptureObserverEnabled"];
  if ((NSNull *)result.videoCaptureObserverEnabled == [NSNull null]) {
    result.videoCaptureObserverEnabled = nil;
  }
  result.videoEncodeMode = dict[@"videoEncodeMode"];
  if ((NSNull *)result.videoEncodeMode == [NSNull null]) {
    result.videoEncodeMode = nil;
  }
  result.videoDecodeMode = dict[@"videoDecodeMode"];
  if ((NSNull *)result.videoDecodeMode == [NSNull null]) {
    result.videoDecodeMode = nil;
  }
  result.videoSendMode = dict[@"videoSendMode"];
  if ((NSNull *)result.videoSendMode == [NSNull null]) {
    result.videoSendMode = nil;
  }
  result.videoH265Enabled = dict[@"videoH265Enabled"];
  if ((NSNull *)result.videoH265Enabled == [NSNull null]) {
    result.videoH265Enabled = nil;
  }
  result.mode1v1Enabled = dict[@"mode1v1Enabled"];
  if ((NSNull *)result.mode1v1Enabled == [NSNull null]) {
    result.mode1v1Enabled = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.appKey ? self.appKey : [NSNull null]), @"appKey", (self.logDir ? self.logDir : [NSNull null]), @"logDir", (self.logLevel ? self.logLevel : [NSNull null]), @"logLevel", (self.audioAutoSubscribe ? self.audioAutoSubscribe : [NSNull null]), @"audioAutoSubscribe", (self.audioDisableOverrideSpeakerOnReceiver ? self.audioDisableOverrideSpeakerOnReceiver : [NSNull null]), @"audioDisableOverrideSpeakerOnReceiver", (self.audioDisableSWAECOnHeadset ? self.audioDisableSWAECOnHeadset : [NSNull null]), @"audioDisableSWAECOnHeadset", (self.audioAINSEnabled ? self.audioAINSEnabled : [NSNull null]), @"audioAINSEnabled", (self.serverRecordAudio ? self.serverRecordAudio : [NSNull null]), @"serverRecordAudio", (self.serverRecordVideo ? self.serverRecordVideo : [NSNull null]), @"serverRecordVideo", (self.serverRecordMode ? self.serverRecordMode : [NSNull null]), @"serverRecordMode", (self.serverRecordSpeaker ? self.serverRecordSpeaker : [NSNull null]), @"serverRecordSpeaker", (self.publishSelfStream ? self.publishSelfStream : [NSNull null]), @"publishSelfStream", (self.videoCaptureObserverEnabled ? self.videoCaptureObserverEnabled : [NSNull null]), @"videoCaptureObserverEnabled", (self.videoEncodeMode ? self.videoEncodeMode : [NSNull null]), @"videoEncodeMode", (self.videoDecodeMode ? self.videoDecodeMode : [NSNull null]), @"videoDecodeMode", (self.videoSendMode ? self.videoSendMode : [NSNull null]), @"videoSendMode", (self.videoH265Enabled ? self.videoH265Enabled : [NSNull null]), @"videoH265Enabled", (self.mode1v1Enabled ? self.mode1v1Enabled : [NSNull null]), @"mode1v1Enabled", nil];
}
@end

@implementation NEFLTJoinChannelRequest
+(NEFLTJoinChannelRequest*)fromMap:(NSDictionary*)dict {
  NEFLTJoinChannelRequest* result = [[NEFLTJoinChannelRequest alloc] init];
  result.token = dict[@"token"];
  if ((NSNull *)result.token == [NSNull null]) {
    result.token = nil;
  }
  result.channelName = dict[@"channelName"];
  if ((NSNull *)result.channelName == [NSNull null]) {
    result.channelName = nil;
  }
  result.uid = dict[@"uid"];
  if ((NSNull *)result.uid == [NSNull null]) {
    result.uid = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.token ? self.token : [NSNull null]), @"token", (self.channelName ? self.channelName : [NSNull null]), @"channelName", (self.uid ? self.uid : [NSNull null]), @"uid", nil];
}
@end

@implementation NEFLTSubscribeRemoteAudioRequest
+(NEFLTSubscribeRemoteAudioRequest*)fromMap:(NSDictionary*)dict {
  NEFLTSubscribeRemoteAudioRequest* result = [[NEFLTSubscribeRemoteAudioRequest alloc] init];
  result.uid = dict[@"uid"];
  if ((NSNull *)result.uid == [NSNull null]) {
    result.uid = nil;
  }
  result.subscribe = dict[@"subscribe"];
  if ((NSNull *)result.subscribe == [NSNull null]) {
    result.subscribe = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.uid ? self.uid : [NSNull null]), @"uid", (self.subscribe ? self.subscribe : [NSNull null]), @"subscribe", nil];
}
@end

@implementation NEFLTSetAudioProfileRequest
+(NEFLTSetAudioProfileRequest*)fromMap:(NSDictionary*)dict {
  NEFLTSetAudioProfileRequest* result = [[NEFLTSetAudioProfileRequest alloc] init];
  result.profile = dict[@"profile"];
  if ((NSNull *)result.profile == [NSNull null]) {
    result.profile = nil;
  }
  result.scenario = dict[@"scenario"];
  if ((NSNull *)result.scenario == [NSNull null]) {
    result.scenario = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.profile ? self.profile : [NSNull null]), @"profile", (self.scenario ? self.scenario : [NSNull null]), @"scenario", nil];
}
@end

@implementation NEFLTSetLocalVideoConfigRequest
+(NEFLTSetLocalVideoConfigRequest*)fromMap:(NSDictionary*)dict {
  NEFLTSetLocalVideoConfigRequest* result = [[NEFLTSetLocalVideoConfigRequest alloc] init];
  result.videoProfile = dict[@"videoProfile"];
  if ((NSNull *)result.videoProfile == [NSNull null]) {
    result.videoProfile = nil;
  }
  result.videoCropMode = dict[@"videoCropMode"];
  if ((NSNull *)result.videoCropMode == [NSNull null]) {
    result.videoCropMode = nil;
  }
  result.frontCamera = dict[@"frontCamera"];
  if ((NSNull *)result.frontCamera == [NSNull null]) {
    result.frontCamera = nil;
  }
  result.frameRate = dict[@"frameRate"];
  if ((NSNull *)result.frameRate == [NSNull null]) {
    result.frameRate = nil;
  }
  result.minFrameRate = dict[@"minFrameRate"];
  if ((NSNull *)result.minFrameRate == [NSNull null]) {
    result.minFrameRate = nil;
  }
  result.bitrate = dict[@"bitrate"];
  if ((NSNull *)result.bitrate == [NSNull null]) {
    result.bitrate = nil;
  }
  result.minBitrate = dict[@"minBitrate"];
  if ((NSNull *)result.minBitrate == [NSNull null]) {
    result.minBitrate = nil;
  }
  result.degradationPrefer = dict[@"degradationPrefer"];
  if ((NSNull *)result.degradationPrefer == [NSNull null]) {
    result.degradationPrefer = nil;
  }
  result.width = dict[@"width"];
  if ((NSNull *)result.width == [NSNull null]) {
    result.width = nil;
  }
  result.height = dict[@"height"];
  if ((NSNull *)result.height == [NSNull null]) {
    result.height = nil;
  }
  result.cameraType = dict[@"cameraType"];
  if ((NSNull *)result.cameraType == [NSNull null]) {
    result.cameraType = nil;
  }
  result.mirrorMode = dict[@"mirrorMode"];
  if ((NSNull *)result.mirrorMode == [NSNull null]) {
    result.mirrorMode = nil;
  }
  result.orientationMode = dict[@"orientationMode"];
  if ((NSNull *)result.orientationMode == [NSNull null]) {
    result.orientationMode = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.videoProfile ? self.videoProfile : [NSNull null]), @"videoProfile", (self.videoCropMode ? self.videoCropMode : [NSNull null]), @"videoCropMode", (self.frontCamera ? self.frontCamera : [NSNull null]), @"frontCamera", (self.frameRate ? self.frameRate : [NSNull null]), @"frameRate", (self.minFrameRate ? self.minFrameRate : [NSNull null]), @"minFrameRate", (self.bitrate ? self.bitrate : [NSNull null]), @"bitrate", (self.minBitrate ? self.minBitrate : [NSNull null]), @"minBitrate", (self.degradationPrefer ? self.degradationPrefer : [NSNull null]), @"degradationPrefer", (self.width ? self.width : [NSNull null]), @"width", (self.height ? self.height : [NSNull null]), @"height", (self.cameraType ? self.cameraType : [NSNull null]), @"cameraType", (self.mirrorMode ? self.mirrorMode : [NSNull null]), @"mirrorMode", (self.orientationMode ? self.orientationMode : [NSNull null]), @"orientationMode", nil];
}
@end

@implementation NEFLTStartScreenCaptureRequest
+(NEFLTStartScreenCaptureRequest*)fromMap:(NSDictionary*)dict {
  NEFLTStartScreenCaptureRequest* result = [[NEFLTStartScreenCaptureRequest alloc] init];
  result.contentPrefer = dict[@"contentPrefer"];
  if ((NSNull *)result.contentPrefer == [NSNull null]) {
    result.contentPrefer = nil;
  }
  result.videoProfile = dict[@"videoProfile"];
  if ((NSNull *)result.videoProfile == [NSNull null]) {
    result.videoProfile = nil;
  }
  result.frameRate = dict[@"frameRate"];
  if ((NSNull *)result.frameRate == [NSNull null]) {
    result.frameRate = nil;
  }
  result.minFrameRate = dict[@"minFrameRate"];
  if ((NSNull *)result.minFrameRate == [NSNull null]) {
    result.minFrameRate = nil;
  }
  result.bitrate = dict[@"bitrate"];
  if ((NSNull *)result.bitrate == [NSNull null]) {
    result.bitrate = nil;
  }
  result.minBitrate = dict[@"minBitrate"];
  if ((NSNull *)result.minBitrate == [NSNull null]) {
    result.minBitrate = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.contentPrefer ? self.contentPrefer : [NSNull null]), @"contentPrefer", (self.videoProfile ? self.videoProfile : [NSNull null]), @"videoProfile", (self.frameRate ? self.frameRate : [NSNull null]), @"frameRate", (self.minFrameRate ? self.minFrameRate : [NSNull null]), @"minFrameRate", (self.bitrate ? self.bitrate : [NSNull null]), @"bitrate", (self.minBitrate ? self.minBitrate : [NSNull null]), @"minBitrate", nil];
}
@end

@implementation NEFLTSubscribeRemoteVideoRequest
+(NEFLTSubscribeRemoteVideoRequest*)fromMap:(NSDictionary*)dict {
  NEFLTSubscribeRemoteVideoRequest* result = [[NEFLTSubscribeRemoteVideoRequest alloc] init];
  result.uid = dict[@"uid"];
  if ((NSNull *)result.uid == [NSNull null]) {
    result.uid = nil;
  }
  result.streamType = dict[@"streamType"];
  if ((NSNull *)result.streamType == [NSNull null]) {
    result.streamType = nil;
  }
  result.subscribe = dict[@"subscribe"];
  if ((NSNull *)result.subscribe == [NSNull null]) {
    result.subscribe = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.uid ? self.uid : [NSNull null]), @"uid", (self.streamType ? self.streamType : [NSNull null]), @"streamType", (self.subscribe ? self.subscribe : [NSNull null]), @"subscribe", nil];
}
@end

@implementation NEFLTSubscribeRemoteSubStreamVideoRequest
+(NEFLTSubscribeRemoteSubStreamVideoRequest*)fromMap:(NSDictionary*)dict {
  NEFLTSubscribeRemoteSubStreamVideoRequest* result = [[NEFLTSubscribeRemoteSubStreamVideoRequest alloc] init];
  result.uid = dict[@"uid"];
  if ((NSNull *)result.uid == [NSNull null]) {
    result.uid = nil;
  }
  result.subscribe = dict[@"subscribe"];
  if ((NSNull *)result.subscribe == [NSNull null]) {
    result.subscribe = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.uid ? self.uid : [NSNull null]), @"uid", (self.subscribe ? self.subscribe : [NSNull null]), @"subscribe", nil];
}
@end

@implementation NEFLTEnableAudioVolumeIndicationRequest
+(NEFLTEnableAudioVolumeIndicationRequest*)fromMap:(NSDictionary*)dict {
  NEFLTEnableAudioVolumeIndicationRequest* result = [[NEFLTEnableAudioVolumeIndicationRequest alloc] init];
  result.enable = dict[@"enable"];
  if ((NSNull *)result.enable == [NSNull null]) {
    result.enable = nil;
  }
  result.interval = dict[@"interval"];
  if ((NSNull *)result.interval == [NSNull null]) {
    result.interval = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.enable ? self.enable : [NSNull null]), @"enable", (self.interval ? self.interval : [NSNull null]), @"interval", nil];
}
@end

@implementation NEFLTAddOrUpdateLiveStreamTaskRequest
+(NEFLTAddOrUpdateLiveStreamTaskRequest*)fromMap:(NSDictionary*)dict {
  NEFLTAddOrUpdateLiveStreamTaskRequest* result = [[NEFLTAddOrUpdateLiveStreamTaskRequest alloc] init];
  result.serial = dict[@"serial"];
  if ((NSNull *)result.serial == [NSNull null]) {
    result.serial = nil;
  }
  result.taskId = dict[@"taskId"];
  if ((NSNull *)result.taskId == [NSNull null]) {
    result.taskId = nil;
  }
  result.url = dict[@"url"];
  if ((NSNull *)result.url == [NSNull null]) {
    result.url = nil;
  }
  result.serverRecordEnabled = dict[@"serverRecordEnabled"];
  if ((NSNull *)result.serverRecordEnabled == [NSNull null]) {
    result.serverRecordEnabled = nil;
  }
  result.liveMode = dict[@"liveMode"];
  if ((NSNull *)result.liveMode == [NSNull null]) {
    result.liveMode = nil;
  }
  result.layoutWidth = dict[@"layoutWidth"];
  if ((NSNull *)result.layoutWidth == [NSNull null]) {
    result.layoutWidth = nil;
  }
  result.layoutHeight = dict[@"layoutHeight"];
  if ((NSNull *)result.layoutHeight == [NSNull null]) {
    result.layoutHeight = nil;
  }
  result.layoutBackgroundColor = dict[@"layoutBackgroundColor"];
  if ((NSNull *)result.layoutBackgroundColor == [NSNull null]) {
    result.layoutBackgroundColor = nil;
  }
  result.layoutImageUrl = dict[@"layoutImageUrl"];
  if ((NSNull *)result.layoutImageUrl == [NSNull null]) {
    result.layoutImageUrl = nil;
  }
  result.layoutImageX = dict[@"layoutImageX"];
  if ((NSNull *)result.layoutImageX == [NSNull null]) {
    result.layoutImageX = nil;
  }
  result.layoutImageY = dict[@"layoutImageY"];
  if ((NSNull *)result.layoutImageY == [NSNull null]) {
    result.layoutImageY = nil;
  }
  result.layoutImageWidth = dict[@"layoutImageWidth"];
  if ((NSNull *)result.layoutImageWidth == [NSNull null]) {
    result.layoutImageWidth = nil;
  }
  result.layoutImageHeight = dict[@"layoutImageHeight"];
  if ((NSNull *)result.layoutImageHeight == [NSNull null]) {
    result.layoutImageHeight = nil;
  }
  result.layoutUserTranscodingList = dict[@"layoutUserTranscodingList"];
  if ((NSNull *)result.layoutUserTranscodingList == [NSNull null]) {
    result.layoutUserTranscodingList = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.serial ? self.serial : [NSNull null]), @"serial", (self.taskId ? self.taskId : [NSNull null]), @"taskId", (self.url ? self.url : [NSNull null]), @"url", (self.serverRecordEnabled ? self.serverRecordEnabled : [NSNull null]), @"serverRecordEnabled", (self.liveMode ? self.liveMode : [NSNull null]), @"liveMode", (self.layoutWidth ? self.layoutWidth : [NSNull null]), @"layoutWidth", (self.layoutHeight ? self.layoutHeight : [NSNull null]), @"layoutHeight", (self.layoutBackgroundColor ? self.layoutBackgroundColor : [NSNull null]), @"layoutBackgroundColor", (self.layoutImageUrl ? self.layoutImageUrl : [NSNull null]), @"layoutImageUrl", (self.layoutImageX ? self.layoutImageX : [NSNull null]), @"layoutImageX", (self.layoutImageY ? self.layoutImageY : [NSNull null]), @"layoutImageY", (self.layoutImageWidth ? self.layoutImageWidth : [NSNull null]), @"layoutImageWidth", (self.layoutImageHeight ? self.layoutImageHeight : [NSNull null]), @"layoutImageHeight", (self.layoutUserTranscodingList ? self.layoutUserTranscodingList : [NSNull null]), @"layoutUserTranscodingList", nil];
}
@end

@implementation NEFLTDeleteLiveStreamTaskRequest
+(NEFLTDeleteLiveStreamTaskRequest*)fromMap:(NSDictionary*)dict {
  NEFLTDeleteLiveStreamTaskRequest* result = [[NEFLTDeleteLiveStreamTaskRequest alloc] init];
  result.serial = dict[@"serial"];
  if ((NSNull *)result.serial == [NSNull null]) {
    result.serial = nil;
  }
  result.taskId = dict[@"taskId"];
  if ((NSNull *)result.taskId == [NSNull null]) {
    result.taskId = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.serial ? self.serial : [NSNull null]), @"serial", (self.taskId ? self.taskId : [NSNull null]), @"taskId", nil];
}
@end

@implementation NEFLTSendSEIMsgRequest
+(NEFLTSendSEIMsgRequest*)fromMap:(NSDictionary*)dict {
  NEFLTSendSEIMsgRequest* result = [[NEFLTSendSEIMsgRequest alloc] init];
  result.seiMsg = dict[@"seiMsg"];
  if ((NSNull *)result.seiMsg == [NSNull null]) {
    result.seiMsg = nil;
  }
  result.streamType = dict[@"streamType"];
  if ((NSNull *)result.streamType == [NSNull null]) {
    result.streamType = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.seiMsg ? self.seiMsg : [NSNull null]), @"seiMsg", (self.streamType ? self.streamType : [NSNull null]), @"streamType", nil];
}
@end

@implementation NEFLTSetLocalVoiceEqualizationRequest
+(NEFLTSetLocalVoiceEqualizationRequest*)fromMap:(NSDictionary*)dict {
  NEFLTSetLocalVoiceEqualizationRequest* result = [[NEFLTSetLocalVoiceEqualizationRequest alloc] init];
  result.bandFrequency = dict[@"bandFrequency"];
  if ((NSNull *)result.bandFrequency == [NSNull null]) {
    result.bandFrequency = nil;
  }
  result.bandGain = dict[@"bandGain"];
  if ((NSNull *)result.bandGain == [NSNull null]) {
    result.bandGain = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.bandFrequency ? self.bandFrequency : [NSNull null]), @"bandFrequency", (self.bandGain ? self.bandGain : [NSNull null]), @"bandGain", nil];
}
@end

@implementation NEFLTSwitchChannelRequest
+(NEFLTSwitchChannelRequest*)fromMap:(NSDictionary*)dict {
  NEFLTSwitchChannelRequest* result = [[NEFLTSwitchChannelRequest alloc] init];
  result.token = dict[@"token"];
  if ((NSNull *)result.token == [NSNull null]) {
    result.token = nil;
  }
  result.channelName = dict[@"channelName"];
  if ((NSNull *)result.channelName == [NSNull null]) {
    result.channelName = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.token ? self.token : [NSNull null]), @"token", (self.channelName ? self.channelName : [NSNull null]), @"channelName", nil];
}
@end

@implementation NEFLTStartAudioRecordingRequest
+(NEFLTStartAudioRecordingRequest*)fromMap:(NSDictionary*)dict {
  NEFLTStartAudioRecordingRequest* result = [[NEFLTStartAudioRecordingRequest alloc] init];
  result.filePath = dict[@"filePath"];
  if ((NSNull *)result.filePath == [NSNull null]) {
    result.filePath = nil;
  }
  result.sampleRate = dict[@"sampleRate"];
  if ((NSNull *)result.sampleRate == [NSNull null]) {
    result.sampleRate = nil;
  }
  result.quality = dict[@"quality"];
  if ((NSNull *)result.quality == [NSNull null]) {
    result.quality = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.filePath ? self.filePath : [NSNull null]), @"filePath", (self.sampleRate ? self.sampleRate : [NSNull null]), @"sampleRate", (self.quality ? self.quality : [NSNull null]), @"quality", nil];
}
@end

@implementation NEFLTSetLocalMediaPriorityRequest
+(NEFLTSetLocalMediaPriorityRequest*)fromMap:(NSDictionary*)dict {
  NEFLTSetLocalMediaPriorityRequest* result = [[NEFLTSetLocalMediaPriorityRequest alloc] init];
  result.priority = dict[@"priority"];
  if ((NSNull *)result.priority == [NSNull null]) {
    result.priority = nil;
  }
  result.isPreemptive = dict[@"isPreemptive"];
  if ((NSNull *)result.isPreemptive == [NSNull null]) {
    result.isPreemptive = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.priority ? self.priority : [NSNull null]), @"priority", (self.isPreemptive ? self.isPreemptive : [NSNull null]), @"isPreemptive", nil];
}
@end

@implementation NEFLTStartOrUpdateChannelMediaReplayRequest
+(NEFLTStartOrUpdateChannelMediaReplayRequest*)fromMap:(NSDictionary*)dict {
  NEFLTStartOrUpdateChannelMediaReplayRequest* result = [[NEFLTStartOrUpdateChannelMediaReplayRequest alloc] init];
  result.sourceMediaInfo = dict[@"sourceMediaInfo"];
  if ((NSNull *)result.sourceMediaInfo == [NSNull null]) {
    result.sourceMediaInfo = nil;
  }
  result.destMediaInfo = dict[@"destMediaInfo"];
  if ((NSNull *)result.destMediaInfo == [NSNull null]) {
    result.destMediaInfo = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sourceMediaInfo ? self.sourceMediaInfo : [NSNull null]), @"sourceMediaInfo", (self.destMediaInfo ? self.destMediaInfo : [NSNull null]), @"destMediaInfo", nil];
}
@end

@implementation NEFLTAdjustUserPlaybackSignalVolumeRequest
+(NEFLTAdjustUserPlaybackSignalVolumeRequest*)fromMap:(NSDictionary*)dict {
  NEFLTAdjustUserPlaybackSignalVolumeRequest* result = [[NEFLTAdjustUserPlaybackSignalVolumeRequest alloc] init];
  result.uid = dict[@"uid"];
  if ((NSNull *)result.uid == [NSNull null]) {
    result.uid = nil;
  }
  result.volume = dict[@"volume"];
  if ((NSNull *)result.volume == [NSNull null]) {
    result.volume = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.uid ? self.uid : [NSNull null]), @"uid", (self.volume ? self.volume : [NSNull null]), @"volume", nil];
}
@end

@implementation NEFLTEnableEncryptionRequest
+(NEFLTEnableEncryptionRequest*)fromMap:(NSDictionary*)dict {
  NEFLTEnableEncryptionRequest* result = [[NEFLTEnableEncryptionRequest alloc] init];
  result.key = dict[@"key"];
  if ((NSNull *)result.key == [NSNull null]) {
    result.key = nil;
  }
  result.mode = dict[@"mode"];
  if ((NSNull *)result.mode == [NSNull null]) {
    result.mode = nil;
  }
  result.enable = dict[@"enable"];
  if ((NSNull *)result.enable == [NSNull null]) {
    result.enable = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.key ? self.key : [NSNull null]), @"key", (self.mode ? self.mode : [NSNull null]), @"mode", (self.enable ? self.enable : [NSNull null]), @"enable", nil];
}
@end

void NEFLTVideoRendererApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<NEFLTVideoRendererApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoRendererApi.createVideoRenderer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api createVideoRenderer:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoRendererApi.setMirror"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTSetVideoRendererMirrorRequest *input = [NEFLTSetVideoRendererMirrorRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setMirror:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoRendererApi.setupLocalVideoRenderer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setupLocalVideoRenderer:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoRendererApi.setupRemoteVideoRenderer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTSetupRemoteVideoRendererRequest *input = [NEFLTSetupRemoteVideoRendererRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setupRemoteVideoRenderer:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoRendererApi.setupLocalSubStreamVideoRenderer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setupLocalSubStreamVideoRenderer:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoRendererApi.setupRemoteSubStreamVideoRenderer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTSetupRemoteSubStreamVideoRendererRequest *input = [NEFLTSetupRemoteSubStreamVideoRendererRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setupRemoteSubStreamVideoRenderer:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.VideoRendererApi.disposeVideoRenderer"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        [api disposeVideoRenderer:input error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void NEFLTAudioMixingApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<NEFLTAudioMixingApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.setAudioMixingEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api setAudioMixingEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.clearAudioMixingEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api clearAudioMixingEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.startAudioMixing"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTStartAudioMixingRequest *input = [NEFLTStartAudioMixingRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api startAudioMixing:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.stopAudioMixing"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api stopAudioMixing:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.pauseAudioMixing"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api pauseAudioMixing:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.resumeAudioMixing"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api resumeAudioMixing:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.setAudioMixingSendVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setAudioMixingSendVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.getAudioMixingSendVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api getAudioMixingSendVolume:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.setAudioMixingPlaybackVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setAudioMixingPlaybackVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.getAudioMixingPlaybackVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api getAudioMixingPlaybackVolume:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.getAudioMixingDuration"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api getAudioMixingDuration:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.getAudioMixingCurrentPosition"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api getAudioMixingCurrentPosition:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioMixingApi.setAudioMixingPosition"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setAudioMixingPosition:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void NEFLTAudioEffectApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<NEFLTAudioEffectApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.setAudioEffectEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api setAudioEffectEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.clearAudioEffectEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api clearAudioEffectEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.playEffect"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTPlayEffectRequest *input = [NEFLTPlayEffectRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api playEffect:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.stopEffect"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api stopEffect:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.stopAllEffects"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api stopAllEffects:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.pauseEffect"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api pauseEffect:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.resumeEffect"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api resumeEffect:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.pauseAllEffects"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api pauseAllEffects:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.resumeAllEffects"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api resumeAllEffects:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.setEffectSendVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTSetEffectSendVolumeRequest *input = [NEFLTSetEffectSendVolumeRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setEffectSendVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.getEffectSendVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api getEffectSendVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.setEffectPlaybackVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTSetEffectPlaybackVolumeRequest *input = [NEFLTSetEffectPlaybackVolumeRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setEffectPlaybackVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.getEffectPlaybackVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api getEffectPlaybackVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.getEffectDuration"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api getEffectDuration:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AudioEffectApi.getEffectCurrentPosition"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api getEffectCurrentPosition:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void NEFLTDeviceManagerApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<NEFLTDeviceManagerApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setDeviceEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api setDeviceEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.clearDeviceEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api clearDeviceEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.isSpeakerphoneOn"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTBoolValue *output = [api isSpeakerphoneOn:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setSpeakerphoneOn"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTBoolValue *input = [NEFLTBoolValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setSpeakerphoneOn:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.switchCamera"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api switchCamera:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setCameraZoomFactor"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setCameraZoomFactor:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.getCameraMaxZoom"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTDoubleValue *output = [api getCameraMaxZoom:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setCameraTorchOn"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTBoolValue *input = [NEFLTBoolValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setCameraTorchOn:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setCameraFocusPosition"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTSetCameraFocusPositionRequest *input = [NEFLTSetCameraFocusPositionRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setCameraFocusPosition:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setPlayoutDeviceMute"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTBoolValue *input = [NEFLTBoolValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setPlayoutDeviceMute:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.isPlayoutDeviceMute"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTBoolValue *output = [api isPlayoutDeviceMute:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setRecordDeviceMute"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTBoolValue *input = [NEFLTBoolValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setRecordDeviceMute:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.isRecordDeviceMute"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTBoolValue *output = [api isRecordDeviceMute:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.enableEarback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTEnableEarbackRequest *input = [NEFLTEnableEarbackRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api enableEarback:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setEarbackVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setEarbackVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.DeviceManagerApi.setAudioFocusMode"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setAudioFocusMode:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
void NEFLTEngineApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<NEFLTEngineApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.create"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTCreateEngineRequest *input = [NEFLTCreateEngineRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api create:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.release"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api release:^(NEFLTIntValue *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setStatsEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api setStatsEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.clearStatsEventCallback"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api clearStatsEventCallback:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setChannelProfile"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setChannelProfile:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.joinChannel"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTJoinChannelRequest *input = [NEFLTJoinChannelRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api joinChannel:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.leaveChannel"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api leaveChannel:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.enableLocalAudio"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTBoolValue *input = [NEFLTBoolValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api enableLocalAudio:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.subscribeRemoteAudio"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTSubscribeRemoteAudioRequest *input = [NEFLTSubscribeRemoteAudioRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api subscribeRemoteAudio:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.subscribeAllRemoteAudio"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTBoolValue *input = [NEFLTBoolValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api subscribeAllRemoteAudio:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setAudioProfile"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTSetAudioProfileRequest *input = [NEFLTSetAudioProfileRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setAudioProfile:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.enableDualStreamMode"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTBoolValue *input = [NEFLTBoolValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api enableDualStreamMode:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setLocalVideoConfig"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTSetLocalVideoConfigRequest *input = [NEFLTSetLocalVideoConfigRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setLocalVideoConfig:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.startVideoPreview"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api startVideoPreview:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.stopVideoPreview"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api stopVideoPreview:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.enableLocalVideo"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTBoolValue *input = [NEFLTBoolValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api enableLocalVideo:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.startScreenCapture"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTStartScreenCaptureRequest *input = [NEFLTStartScreenCaptureRequest fromMap:message];
        [api startScreenCapture:input completion:^(NEFLTIntValue *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.stopScreenCapture"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api stopScreenCapture:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.subscribeRemoteVideo"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTSubscribeRemoteVideoRequest *input = [NEFLTSubscribeRemoteVideoRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api subscribeRemoteVideo:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.subscribeRemoteSubStreamVideo"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTSubscribeRemoteSubStreamVideoRequest *input = [NEFLTSubscribeRemoteSubStreamVideoRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api subscribeRemoteSubStreamVideo:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.muteLocalAudioStream"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTBoolValue *input = [NEFLTBoolValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api muteLocalAudioStream:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.muteLocalVideoStream"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTBoolValue *input = [NEFLTBoolValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api muteLocalVideoStream:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.startAudioDump"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api startAudioDump:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.stopAudioDump"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api stopAudioDump:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.enableAudioVolumeIndication"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTEnableAudioVolumeIndicationRequest *input = [NEFLTEnableAudioVolumeIndicationRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api enableAudioVolumeIndication:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.adjustRecordingSignalVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api adjustRecordingSignalVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.adjustPlaybackSignalVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api adjustPlaybackSignalVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.addLiveStreamTask"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTAddOrUpdateLiveStreamTaskRequest *input = [NEFLTAddOrUpdateLiveStreamTaskRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api addLiveStreamTask:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.updateLiveStreamTask"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTAddOrUpdateLiveStreamTaskRequest *input = [NEFLTAddOrUpdateLiveStreamTaskRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api updateLiveStreamTask:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.removeLiveStreamTask"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTDeleteLiveStreamTaskRequest *input = [NEFLTDeleteLiveStreamTaskRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api removeLiveStreamTask:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setClientRole"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setClientRole:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.getConnectionState"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api getConnectionState:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.uploadSdkInfo"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api uploadSdkInfo:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.sendSEIMsg"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTSendSEIMsgRequest *input = [NEFLTSendSEIMsgRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api sendSEIMsg:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setAudioEffectPreset"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setAudioEffectPreset:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setVoiceBeautifierPreset"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setVoiceBeautifierPreset:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setLocalVoicePitch"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTDoubleValue *input = [NEFLTDoubleValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setLocalVoicePitch:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setLocalVoiceEqualization"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTSetLocalVoiceEqualizationRequest *input = [NEFLTSetLocalVoiceEqualizationRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setLocalVoiceEqualization:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.switchChannel"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTSwitchChannelRequest *input = [NEFLTSwitchChannelRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api switchChannel:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.startAudioRecording"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTStartAudioRecordingRequest *input = [NEFLTStartAudioRecordingRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api startAudioRecording:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.stopAudioRecording"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api stopAudioRecording:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setLocalMediaPriority"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTSetLocalMediaPriorityRequest *input = [NEFLTSetLocalMediaPriorityRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setLocalMediaPriority:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.startChannelMediaReplay"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTStartOrUpdateChannelMediaReplayRequest *input = [NEFLTStartOrUpdateChannelMediaReplayRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api startChannelMediaReplay:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.updateChannelMediaRelay"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTStartOrUpdateChannelMediaReplayRequest *input = [NEFLTStartOrUpdateChannelMediaReplayRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api updateChannelMediaRelay:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.stopChannelMediaRelay"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NEFLTIntValue *output = [api stopChannelMediaRelay:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.adjustUserPlaybackSignalVolume"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTAdjustUserPlaybackSignalVolumeRequest *input = [NEFLTAdjustUserPlaybackSignalVolumeRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api adjustUserPlaybackSignalVolume:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setLocalPublishFallbackOption"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setLocalPublishFallbackOption:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.setRemoteSubscribeFallbackOption"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTIntValue *input = [NEFLTIntValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api setRemoteSubscribeFallbackOption:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.enableSuperResolution"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTBoolValue *input = [NEFLTBoolValue fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api enableSuperResolution:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.EngineApi.enableEncryption"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NEFLTEnableEncryptionRequest *input = [NEFLTEnableEncryptionRequest fromMap:message];
        FlutterError *error;
        NEFLTIntValue *output = [api enableEncryption:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}

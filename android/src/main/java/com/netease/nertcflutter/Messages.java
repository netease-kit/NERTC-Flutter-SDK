// Autogenerated from Pigeon (v0.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.netease.nertcflutter;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IntValue {
    private Long value;
    public Long getValue() { return value; }
    public void setValue(Long setterArg) { this.value = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      return toMapResult;
    }
    static IntValue fromMap(Map<String, Object> map) {
      IntValue fromMapResult = new IntValue();
      Object value = map.get("value");
      fromMapResult.value = (value == null) ? null : ((value instanceof Integer) ? (Integer)value : (Long)value);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetVideoRendererMirrorRequest {
    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    private Boolean mirror;
    public Boolean getMirror() { return mirror; }
    public void setMirror(Boolean setterArg) { this.mirror = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("textureId", textureId);
      toMapResult.put("mirror", mirror);
      return toMapResult;
    }
    static SetVideoRendererMirrorRequest fromMap(Map<String, Object> map) {
      SetVideoRendererMirrorRequest fromMapResult = new SetVideoRendererMirrorRequest();
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      Object mirror = map.get("mirror");
      fromMapResult.mirror = (Boolean)mirror;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetupRemoteVideoRendererRequest {
    private Long uid;
    public Long getUid() { return uid; }
    public void setUid(Long setterArg) { this.uid = setterArg; }

    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uid", uid);
      toMapResult.put("textureId", textureId);
      return toMapResult;
    }
    static SetupRemoteVideoRendererRequest fromMap(Map<String, Object> map) {
      SetupRemoteVideoRendererRequest fromMapResult = new SetupRemoteVideoRendererRequest();
      Object uid = map.get("uid");
      fromMapResult.uid = (uid == null) ? null : ((uid instanceof Integer) ? (Integer)uid : (Long)uid);
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetupRemoteSubStreamVideoRendererRequest {
    private Long uid;
    public Long getUid() { return uid; }
    public void setUid(Long setterArg) { this.uid = setterArg; }

    private Long textureId;
    public Long getTextureId() { return textureId; }
    public void setTextureId(Long setterArg) { this.textureId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uid", uid);
      toMapResult.put("textureId", textureId);
      return toMapResult;
    }
    static SetupRemoteSubStreamVideoRendererRequest fromMap(Map<String, Object> map) {
      SetupRemoteSubStreamVideoRendererRequest fromMapResult = new SetupRemoteSubStreamVideoRendererRequest();
      Object uid = map.get("uid");
      fromMapResult.uid = (uid == null) ? null : ((uid instanceof Integer) ? (Integer)uid : (Long)uid);
      Object textureId = map.get("textureId");
      fromMapResult.textureId = (textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StartAudioMixingRequest {
    private String path;
    public String getPath() { return path; }
    public void setPath(String setterArg) { this.path = setterArg; }

    private Long loopCount;
    public Long getLoopCount() { return loopCount; }
    public void setLoopCount(Long setterArg) { this.loopCount = setterArg; }

    private Boolean sendEnabled;
    public Boolean getSendEnabled() { return sendEnabled; }
    public void setSendEnabled(Boolean setterArg) { this.sendEnabled = setterArg; }

    private Long sendVolume;
    public Long getSendVolume() { return sendVolume; }
    public void setSendVolume(Long setterArg) { this.sendVolume = setterArg; }

    private Boolean playbackEnabled;
    public Boolean getPlaybackEnabled() { return playbackEnabled; }
    public void setPlaybackEnabled(Boolean setterArg) { this.playbackEnabled = setterArg; }

    private Long playbackVolume;
    public Long getPlaybackVolume() { return playbackVolume; }
    public void setPlaybackVolume(Long setterArg) { this.playbackVolume = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("path", path);
      toMapResult.put("loopCount", loopCount);
      toMapResult.put("sendEnabled", sendEnabled);
      toMapResult.put("sendVolume", sendVolume);
      toMapResult.put("playbackEnabled", playbackEnabled);
      toMapResult.put("playbackVolume", playbackVolume);
      return toMapResult;
    }
    static StartAudioMixingRequest fromMap(Map<String, Object> map) {
      StartAudioMixingRequest fromMapResult = new StartAudioMixingRequest();
      Object path = map.get("path");
      fromMapResult.path = (String)path;
      Object loopCount = map.get("loopCount");
      fromMapResult.loopCount = (loopCount == null) ? null : ((loopCount instanceof Integer) ? (Integer)loopCount : (Long)loopCount);
      Object sendEnabled = map.get("sendEnabled");
      fromMapResult.sendEnabled = (Boolean)sendEnabled;
      Object sendVolume = map.get("sendVolume");
      fromMapResult.sendVolume = (sendVolume == null) ? null : ((sendVolume instanceof Integer) ? (Integer)sendVolume : (Long)sendVolume);
      Object playbackEnabled = map.get("playbackEnabled");
      fromMapResult.playbackEnabled = (Boolean)playbackEnabled;
      Object playbackVolume = map.get("playbackVolume");
      fromMapResult.playbackVolume = (playbackVolume == null) ? null : ((playbackVolume instanceof Integer) ? (Integer)playbackVolume : (Long)playbackVolume);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PlayEffectRequest {
    private Long effectId;
    public Long getEffectId() { return effectId; }
    public void setEffectId(Long setterArg) { this.effectId = setterArg; }

    private String path;
    public String getPath() { return path; }
    public void setPath(String setterArg) { this.path = setterArg; }

    private Long loopCount;
    public Long getLoopCount() { return loopCount; }
    public void setLoopCount(Long setterArg) { this.loopCount = setterArg; }

    private Boolean sendEnabled;
    public Boolean getSendEnabled() { return sendEnabled; }
    public void setSendEnabled(Boolean setterArg) { this.sendEnabled = setterArg; }

    private Long sendVolume;
    public Long getSendVolume() { return sendVolume; }
    public void setSendVolume(Long setterArg) { this.sendVolume = setterArg; }

    private Boolean playbackEnabled;
    public Boolean getPlaybackEnabled() { return playbackEnabled; }
    public void setPlaybackEnabled(Boolean setterArg) { this.playbackEnabled = setterArg; }

    private Long playbackVolume;
    public Long getPlaybackVolume() { return playbackVolume; }
    public void setPlaybackVolume(Long setterArg) { this.playbackVolume = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("effectId", effectId);
      toMapResult.put("path", path);
      toMapResult.put("loopCount", loopCount);
      toMapResult.put("sendEnabled", sendEnabled);
      toMapResult.put("sendVolume", sendVolume);
      toMapResult.put("playbackEnabled", playbackEnabled);
      toMapResult.put("playbackVolume", playbackVolume);
      return toMapResult;
    }
    static PlayEffectRequest fromMap(Map<String, Object> map) {
      PlayEffectRequest fromMapResult = new PlayEffectRequest();
      Object effectId = map.get("effectId");
      fromMapResult.effectId = (effectId == null) ? null : ((effectId instanceof Integer) ? (Integer)effectId : (Long)effectId);
      Object path = map.get("path");
      fromMapResult.path = (String)path;
      Object loopCount = map.get("loopCount");
      fromMapResult.loopCount = (loopCount == null) ? null : ((loopCount instanceof Integer) ? (Integer)loopCount : (Long)loopCount);
      Object sendEnabled = map.get("sendEnabled");
      fromMapResult.sendEnabled = (Boolean)sendEnabled;
      Object sendVolume = map.get("sendVolume");
      fromMapResult.sendVolume = (sendVolume == null) ? null : ((sendVolume instanceof Integer) ? (Integer)sendVolume : (Long)sendVolume);
      Object playbackEnabled = map.get("playbackEnabled");
      fromMapResult.playbackEnabled = (Boolean)playbackEnabled;
      Object playbackVolume = map.get("playbackVolume");
      fromMapResult.playbackVolume = (playbackVolume == null) ? null : ((playbackVolume instanceof Integer) ? (Integer)playbackVolume : (Long)playbackVolume);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetEffectSendVolumeRequest {
    private Long effectId;
    public Long getEffectId() { return effectId; }
    public void setEffectId(Long setterArg) { this.effectId = setterArg; }

    private Long volume;
    public Long getVolume() { return volume; }
    public void setVolume(Long setterArg) { this.volume = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("effectId", effectId);
      toMapResult.put("volume", volume);
      return toMapResult;
    }
    static SetEffectSendVolumeRequest fromMap(Map<String, Object> map) {
      SetEffectSendVolumeRequest fromMapResult = new SetEffectSendVolumeRequest();
      Object effectId = map.get("effectId");
      fromMapResult.effectId = (effectId == null) ? null : ((effectId instanceof Integer) ? (Integer)effectId : (Long)effectId);
      Object volume = map.get("volume");
      fromMapResult.volume = (volume == null) ? null : ((volume instanceof Integer) ? (Integer)volume : (Long)volume);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetEffectPlaybackVolumeRequest {
    private Long effectId;
    public Long getEffectId() { return effectId; }
    public void setEffectId(Long setterArg) { this.effectId = setterArg; }

    private Long volume;
    public Long getVolume() { return volume; }
    public void setVolume(Long setterArg) { this.volume = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("effectId", effectId);
      toMapResult.put("volume", volume);
      return toMapResult;
    }
    static SetEffectPlaybackVolumeRequest fromMap(Map<String, Object> map) {
      SetEffectPlaybackVolumeRequest fromMapResult = new SetEffectPlaybackVolumeRequest();
      Object effectId = map.get("effectId");
      fromMapResult.effectId = (effectId == null) ? null : ((effectId instanceof Integer) ? (Integer)effectId : (Long)effectId);
      Object volume = map.get("volume");
      fromMapResult.volume = (volume == null) ? null : ((volume instanceof Integer) ? (Integer)volume : (Long)volume);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class BoolValue {
    private Boolean value;
    public Boolean getValue() { return value; }
    public void setValue(Boolean setterArg) { this.value = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      return toMapResult;
    }
    static BoolValue fromMap(Map<String, Object> map) {
      BoolValue fromMapResult = new BoolValue();
      Object value = map.get("value");
      fromMapResult.value = (Boolean)value;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DoubleValue {
    private Double value;
    public Double getValue() { return value; }
    public void setValue(Double setterArg) { this.value = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("value", value);
      return toMapResult;
    }
    static DoubleValue fromMap(Map<String, Object> map) {
      DoubleValue fromMapResult = new DoubleValue();
      Object value = map.get("value");
      fromMapResult.value = (Double)value;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetCameraFocusPositionRequest {
    private Double x;
    public Double getX() { return x; }
    public void setX(Double setterArg) { this.x = setterArg; }

    private Double y;
    public Double getY() { return y; }
    public void setY(Double setterArg) { this.y = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("x", x);
      toMapResult.put("y", y);
      return toMapResult;
    }
    static SetCameraFocusPositionRequest fromMap(Map<String, Object> map) {
      SetCameraFocusPositionRequest fromMapResult = new SetCameraFocusPositionRequest();
      Object x = map.get("x");
      fromMapResult.x = (Double)x;
      Object y = map.get("y");
      fromMapResult.y = (Double)y;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class EnableEarbackRequest {
    private Boolean enabled;
    public Boolean getEnabled() { return enabled; }
    public void setEnabled(Boolean setterArg) { this.enabled = setterArg; }

    private Long volume;
    public Long getVolume() { return volume; }
    public void setVolume(Long setterArg) { this.volume = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("enabled", enabled);
      toMapResult.put("volume", volume);
      return toMapResult;
    }
    static EnableEarbackRequest fromMap(Map<String, Object> map) {
      EnableEarbackRequest fromMapResult = new EnableEarbackRequest();
      Object enabled = map.get("enabled");
      fromMapResult.enabled = (Boolean)enabled;
      Object volume = map.get("volume");
      fromMapResult.volume = (volume == null) ? null : ((volume instanceof Integer) ? (Integer)volume : (Long)volume);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CreateEngineRequest {
    private String appKey;
    public String getAppKey() { return appKey; }
    public void setAppKey(String setterArg) { this.appKey = setterArg; }

    private String logDir;
    public String getLogDir() { return logDir; }
    public void setLogDir(String setterArg) { this.logDir = setterArg; }

    private Long logLevel;
    public Long getLogLevel() { return logLevel; }
    public void setLogLevel(Long setterArg) { this.logLevel = setterArg; }

    private Boolean audioAutoSubscribe;
    public Boolean getAudioAutoSubscribe() { return audioAutoSubscribe; }
    public void setAudioAutoSubscribe(Boolean setterArg) { this.audioAutoSubscribe = setterArg; }

    private Boolean audioDisableOverrideSpeakerOnReceiver;
    public Boolean getAudioDisableOverrideSpeakerOnReceiver() { return audioDisableOverrideSpeakerOnReceiver; }
    public void setAudioDisableOverrideSpeakerOnReceiver(Boolean setterArg) { this.audioDisableOverrideSpeakerOnReceiver = setterArg; }

    private Boolean audioDisableSWAECOnHeadset;
    public Boolean getAudioDisableSWAECOnHeadset() { return audioDisableSWAECOnHeadset; }
    public void setAudioDisableSWAECOnHeadset(Boolean setterArg) { this.audioDisableSWAECOnHeadset = setterArg; }

    private Boolean audioAINSEnabled;
    public Boolean getAudioAINSEnabled() { return audioAINSEnabled; }
    public void setAudioAINSEnabled(Boolean setterArg) { this.audioAINSEnabled = setterArg; }

    private Boolean serverRecordAudio;
    public Boolean getServerRecordAudio() { return serverRecordAudio; }
    public void setServerRecordAudio(Boolean setterArg) { this.serverRecordAudio = setterArg; }

    private Boolean serverRecordVideo;
    public Boolean getServerRecordVideo() { return serverRecordVideo; }
    public void setServerRecordVideo(Boolean setterArg) { this.serverRecordVideo = setterArg; }

    private Long serverRecordMode;
    public Long getServerRecordMode() { return serverRecordMode; }
    public void setServerRecordMode(Long setterArg) { this.serverRecordMode = setterArg; }

    private Boolean serverRecordSpeaker;
    public Boolean getServerRecordSpeaker() { return serverRecordSpeaker; }
    public void setServerRecordSpeaker(Boolean setterArg) { this.serverRecordSpeaker = setterArg; }

    private Boolean publishSelfStream;
    public Boolean getPublishSelfStream() { return publishSelfStream; }
    public void setPublishSelfStream(Boolean setterArg) { this.publishSelfStream = setterArg; }

    private Boolean videoCaptureObserverEnabled;
    public Boolean getVideoCaptureObserverEnabled() { return videoCaptureObserverEnabled; }
    public void setVideoCaptureObserverEnabled(Boolean setterArg) { this.videoCaptureObserverEnabled = setterArg; }

    private Long videoEncodeMode;
    public Long getVideoEncodeMode() { return videoEncodeMode; }
    public void setVideoEncodeMode(Long setterArg) { this.videoEncodeMode = setterArg; }

    private Long videoDecodeMode;
    public Long getVideoDecodeMode() { return videoDecodeMode; }
    public void setVideoDecodeMode(Long setterArg) { this.videoDecodeMode = setterArg; }

    private Long videoSendMode;
    public Long getVideoSendMode() { return videoSendMode; }
    public void setVideoSendMode(Long setterArg) { this.videoSendMode = setterArg; }

    private Boolean videoH265Enabled;
    public Boolean getVideoH265Enabled() { return videoH265Enabled; }
    public void setVideoH265Enabled(Boolean setterArg) { this.videoH265Enabled = setterArg; }

    private Boolean mode1v1Enabled;
    public Boolean getMode1v1Enabled() { return mode1v1Enabled; }
    public void setMode1v1Enabled(Boolean setterArg) { this.mode1v1Enabled = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("appKey", appKey);
      toMapResult.put("logDir", logDir);
      toMapResult.put("logLevel", logLevel);
      toMapResult.put("audioAutoSubscribe", audioAutoSubscribe);
      toMapResult.put("audioDisableOverrideSpeakerOnReceiver", audioDisableOverrideSpeakerOnReceiver);
      toMapResult.put("audioDisableSWAECOnHeadset", audioDisableSWAECOnHeadset);
      toMapResult.put("audioAINSEnabled", audioAINSEnabled);
      toMapResult.put("serverRecordAudio", serverRecordAudio);
      toMapResult.put("serverRecordVideo", serverRecordVideo);
      toMapResult.put("serverRecordMode", serverRecordMode);
      toMapResult.put("serverRecordSpeaker", serverRecordSpeaker);
      toMapResult.put("publishSelfStream", publishSelfStream);
      toMapResult.put("videoCaptureObserverEnabled", videoCaptureObserverEnabled);
      toMapResult.put("videoEncodeMode", videoEncodeMode);
      toMapResult.put("videoDecodeMode", videoDecodeMode);
      toMapResult.put("videoSendMode", videoSendMode);
      toMapResult.put("videoH265Enabled", videoH265Enabled);
      toMapResult.put("mode1v1Enabled", mode1v1Enabled);
      return toMapResult;
    }
    static CreateEngineRequest fromMap(Map<String, Object> map) {
      CreateEngineRequest fromMapResult = new CreateEngineRequest();
      Object appKey = map.get("appKey");
      fromMapResult.appKey = (String)appKey;
      Object logDir = map.get("logDir");
      fromMapResult.logDir = (String)logDir;
      Object logLevel = map.get("logLevel");
      fromMapResult.logLevel = (logLevel == null) ? null : ((logLevel instanceof Integer) ? (Integer)logLevel : (Long)logLevel);
      Object audioAutoSubscribe = map.get("audioAutoSubscribe");
      fromMapResult.audioAutoSubscribe = (Boolean)audioAutoSubscribe;
      Object audioDisableOverrideSpeakerOnReceiver = map.get("audioDisableOverrideSpeakerOnReceiver");
      fromMapResult.audioDisableOverrideSpeakerOnReceiver = (Boolean)audioDisableOverrideSpeakerOnReceiver;
      Object audioDisableSWAECOnHeadset = map.get("audioDisableSWAECOnHeadset");
      fromMapResult.audioDisableSWAECOnHeadset = (Boolean)audioDisableSWAECOnHeadset;
      Object audioAINSEnabled = map.get("audioAINSEnabled");
      fromMapResult.audioAINSEnabled = (Boolean)audioAINSEnabled;
      Object serverRecordAudio = map.get("serverRecordAudio");
      fromMapResult.serverRecordAudio = (Boolean)serverRecordAudio;
      Object serverRecordVideo = map.get("serverRecordVideo");
      fromMapResult.serverRecordVideo = (Boolean)serverRecordVideo;
      Object serverRecordMode = map.get("serverRecordMode");
      fromMapResult.serverRecordMode = (serverRecordMode == null) ? null : ((serverRecordMode instanceof Integer) ? (Integer)serverRecordMode : (Long)serverRecordMode);
      Object serverRecordSpeaker = map.get("serverRecordSpeaker");
      fromMapResult.serverRecordSpeaker = (Boolean)serverRecordSpeaker;
      Object publishSelfStream = map.get("publishSelfStream");
      fromMapResult.publishSelfStream = (Boolean)publishSelfStream;
      Object videoCaptureObserverEnabled = map.get("videoCaptureObserverEnabled");
      fromMapResult.videoCaptureObserverEnabled = (Boolean)videoCaptureObserverEnabled;
      Object videoEncodeMode = map.get("videoEncodeMode");
      fromMapResult.videoEncodeMode = (videoEncodeMode == null) ? null : ((videoEncodeMode instanceof Integer) ? (Integer)videoEncodeMode : (Long)videoEncodeMode);
      Object videoDecodeMode = map.get("videoDecodeMode");
      fromMapResult.videoDecodeMode = (videoDecodeMode == null) ? null : ((videoDecodeMode instanceof Integer) ? (Integer)videoDecodeMode : (Long)videoDecodeMode);
      Object videoSendMode = map.get("videoSendMode");
      fromMapResult.videoSendMode = (videoSendMode == null) ? null : ((videoSendMode instanceof Integer) ? (Integer)videoSendMode : (Long)videoSendMode);
      Object videoH265Enabled = map.get("videoH265Enabled");
      fromMapResult.videoH265Enabled = (Boolean)videoH265Enabled;
      Object mode1v1Enabled = map.get("mode1v1Enabled");
      fromMapResult.mode1v1Enabled = (Boolean)mode1v1Enabled;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class JoinChannelRequest {
    private String token;
    public String getToken() { return token; }
    public void setToken(String setterArg) { this.token = setterArg; }

    private String channelName;
    public String getChannelName() { return channelName; }
    public void setChannelName(String setterArg) { this.channelName = setterArg; }

    private Long uid;
    public Long getUid() { return uid; }
    public void setUid(Long setterArg) { this.uid = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("token", token);
      toMapResult.put("channelName", channelName);
      toMapResult.put("uid", uid);
      return toMapResult;
    }
    static JoinChannelRequest fromMap(Map<String, Object> map) {
      JoinChannelRequest fromMapResult = new JoinChannelRequest();
      Object token = map.get("token");
      fromMapResult.token = (String)token;
      Object channelName = map.get("channelName");
      fromMapResult.channelName = (String)channelName;
      Object uid = map.get("uid");
      fromMapResult.uid = (uid == null) ? null : ((uid instanceof Integer) ? (Integer)uid : (Long)uid);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SubscribeRemoteAudioRequest {
    private Long uid;
    public Long getUid() { return uid; }
    public void setUid(Long setterArg) { this.uid = setterArg; }

    private Boolean subscribe;
    public Boolean getSubscribe() { return subscribe; }
    public void setSubscribe(Boolean setterArg) { this.subscribe = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uid", uid);
      toMapResult.put("subscribe", subscribe);
      return toMapResult;
    }
    static SubscribeRemoteAudioRequest fromMap(Map<String, Object> map) {
      SubscribeRemoteAudioRequest fromMapResult = new SubscribeRemoteAudioRequest();
      Object uid = map.get("uid");
      fromMapResult.uid = (uid == null) ? null : ((uid instanceof Integer) ? (Integer)uid : (Long)uid);
      Object subscribe = map.get("subscribe");
      fromMapResult.subscribe = (Boolean)subscribe;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetAudioProfileRequest {
    private Long profile;
    public Long getProfile() { return profile; }
    public void setProfile(Long setterArg) { this.profile = setterArg; }

    private Long scenario;
    public Long getScenario() { return scenario; }
    public void setScenario(Long setterArg) { this.scenario = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("profile", profile);
      toMapResult.put("scenario", scenario);
      return toMapResult;
    }
    static SetAudioProfileRequest fromMap(Map<String, Object> map) {
      SetAudioProfileRequest fromMapResult = new SetAudioProfileRequest();
      Object profile = map.get("profile");
      fromMapResult.profile = (profile == null) ? null : ((profile instanceof Integer) ? (Integer)profile : (Long)profile);
      Object scenario = map.get("scenario");
      fromMapResult.scenario = (scenario == null) ? null : ((scenario instanceof Integer) ? (Integer)scenario : (Long)scenario);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetLocalVideoConfigRequest {
    private Long videoProfile;
    public Long getVideoProfile() { return videoProfile; }
    public void setVideoProfile(Long setterArg) { this.videoProfile = setterArg; }

    private Long videoCropMode;
    public Long getVideoCropMode() { return videoCropMode; }
    public void setVideoCropMode(Long setterArg) { this.videoCropMode = setterArg; }

    private Boolean frontCamera;
    public Boolean getFrontCamera() { return frontCamera; }
    public void setFrontCamera(Boolean setterArg) { this.frontCamera = setterArg; }

    private Long frameRate;
    public Long getFrameRate() { return frameRate; }
    public void setFrameRate(Long setterArg) { this.frameRate = setterArg; }

    private Long minFrameRate;
    public Long getMinFrameRate() { return minFrameRate; }
    public void setMinFrameRate(Long setterArg) { this.minFrameRate = setterArg; }

    private Long bitrate;
    public Long getBitrate() { return bitrate; }
    public void setBitrate(Long setterArg) { this.bitrate = setterArg; }

    private Long minBitrate;
    public Long getMinBitrate() { return minBitrate; }
    public void setMinBitrate(Long setterArg) { this.minBitrate = setterArg; }

    private Long degradationPrefer;
    public Long getDegradationPrefer() { return degradationPrefer; }
    public void setDegradationPrefer(Long setterArg) { this.degradationPrefer = setterArg; }

    private Long width;
    public Long getWidth() { return width; }
    public void setWidth(Long setterArg) { this.width = setterArg; }

    private Long height;
    public Long getHeight() { return height; }
    public void setHeight(Long setterArg) { this.height = setterArg; }

    private Long cameraType;
    public Long getCameraType() { return cameraType; }
    public void setCameraType(Long setterArg) { this.cameraType = setterArg; }

    private Long mirrorMode;
    public Long getMirrorMode() { return mirrorMode; }
    public void setMirrorMode(Long setterArg) { this.mirrorMode = setterArg; }

    private Long orientationMode;
    public Long getOrientationMode() { return orientationMode; }
    public void setOrientationMode(Long setterArg) { this.orientationMode = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("videoProfile", videoProfile);
      toMapResult.put("videoCropMode", videoCropMode);
      toMapResult.put("frontCamera", frontCamera);
      toMapResult.put("frameRate", frameRate);
      toMapResult.put("minFrameRate", minFrameRate);
      toMapResult.put("bitrate", bitrate);
      toMapResult.put("minBitrate", minBitrate);
      toMapResult.put("degradationPrefer", degradationPrefer);
      toMapResult.put("width", width);
      toMapResult.put("height", height);
      toMapResult.put("cameraType", cameraType);
      toMapResult.put("mirrorMode", mirrorMode);
      toMapResult.put("orientationMode", orientationMode);
      return toMapResult;
    }
    static SetLocalVideoConfigRequest fromMap(Map<String, Object> map) {
      SetLocalVideoConfigRequest fromMapResult = new SetLocalVideoConfigRequest();
      Object videoProfile = map.get("videoProfile");
      fromMapResult.videoProfile = (videoProfile == null) ? null : ((videoProfile instanceof Integer) ? (Integer)videoProfile : (Long)videoProfile);
      Object videoCropMode = map.get("videoCropMode");
      fromMapResult.videoCropMode = (videoCropMode == null) ? null : ((videoCropMode instanceof Integer) ? (Integer)videoCropMode : (Long)videoCropMode);
      Object frontCamera = map.get("frontCamera");
      fromMapResult.frontCamera = (Boolean)frontCamera;
      Object frameRate = map.get("frameRate");
      fromMapResult.frameRate = (frameRate == null) ? null : ((frameRate instanceof Integer) ? (Integer)frameRate : (Long)frameRate);
      Object minFrameRate = map.get("minFrameRate");
      fromMapResult.minFrameRate = (minFrameRate == null) ? null : ((minFrameRate instanceof Integer) ? (Integer)minFrameRate : (Long)minFrameRate);
      Object bitrate = map.get("bitrate");
      fromMapResult.bitrate = (bitrate == null) ? null : ((bitrate instanceof Integer) ? (Integer)bitrate : (Long)bitrate);
      Object minBitrate = map.get("minBitrate");
      fromMapResult.minBitrate = (minBitrate == null) ? null : ((minBitrate instanceof Integer) ? (Integer)minBitrate : (Long)minBitrate);
      Object degradationPrefer = map.get("degradationPrefer");
      fromMapResult.degradationPrefer = (degradationPrefer == null) ? null : ((degradationPrefer instanceof Integer) ? (Integer)degradationPrefer : (Long)degradationPrefer);
      Object width = map.get("width");
      fromMapResult.width = (width == null) ? null : ((width instanceof Integer) ? (Integer)width : (Long)width);
      Object height = map.get("height");
      fromMapResult.height = (height == null) ? null : ((height instanceof Integer) ? (Integer)height : (Long)height);
      Object cameraType = map.get("cameraType");
      fromMapResult.cameraType = (cameraType == null) ? null : ((cameraType instanceof Integer) ? (Integer)cameraType : (Long)cameraType);
      Object mirrorMode = map.get("mirrorMode");
      fromMapResult.mirrorMode = (mirrorMode == null) ? null : ((mirrorMode instanceof Integer) ? (Integer)mirrorMode : (Long)mirrorMode);
      Object orientationMode = map.get("orientationMode");
      fromMapResult.orientationMode = (orientationMode == null) ? null : ((orientationMode instanceof Integer) ? (Integer)orientationMode : (Long)orientationMode);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StartScreenCaptureRequest {
    private Long contentPrefer;
    public Long getContentPrefer() { return contentPrefer; }
    public void setContentPrefer(Long setterArg) { this.contentPrefer = setterArg; }

    private Long videoProfile;
    public Long getVideoProfile() { return videoProfile; }
    public void setVideoProfile(Long setterArg) { this.videoProfile = setterArg; }

    private Long frameRate;
    public Long getFrameRate() { return frameRate; }
    public void setFrameRate(Long setterArg) { this.frameRate = setterArg; }

    private Long minFrameRate;
    public Long getMinFrameRate() { return minFrameRate; }
    public void setMinFrameRate(Long setterArg) { this.minFrameRate = setterArg; }

    private Long bitrate;
    public Long getBitrate() { return bitrate; }
    public void setBitrate(Long setterArg) { this.bitrate = setterArg; }

    private Long minBitrate;
    public Long getMinBitrate() { return minBitrate; }
    public void setMinBitrate(Long setterArg) { this.minBitrate = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("contentPrefer", contentPrefer);
      toMapResult.put("videoProfile", videoProfile);
      toMapResult.put("frameRate", frameRate);
      toMapResult.put("minFrameRate", minFrameRate);
      toMapResult.put("bitrate", bitrate);
      toMapResult.put("minBitrate", minBitrate);
      return toMapResult;
    }
    static StartScreenCaptureRequest fromMap(Map<String, Object> map) {
      StartScreenCaptureRequest fromMapResult = new StartScreenCaptureRequest();
      Object contentPrefer = map.get("contentPrefer");
      fromMapResult.contentPrefer = (contentPrefer == null) ? null : ((contentPrefer instanceof Integer) ? (Integer)contentPrefer : (Long)contentPrefer);
      Object videoProfile = map.get("videoProfile");
      fromMapResult.videoProfile = (videoProfile == null) ? null : ((videoProfile instanceof Integer) ? (Integer)videoProfile : (Long)videoProfile);
      Object frameRate = map.get("frameRate");
      fromMapResult.frameRate = (frameRate == null) ? null : ((frameRate instanceof Integer) ? (Integer)frameRate : (Long)frameRate);
      Object minFrameRate = map.get("minFrameRate");
      fromMapResult.minFrameRate = (minFrameRate == null) ? null : ((minFrameRate instanceof Integer) ? (Integer)minFrameRate : (Long)minFrameRate);
      Object bitrate = map.get("bitrate");
      fromMapResult.bitrate = (bitrate == null) ? null : ((bitrate instanceof Integer) ? (Integer)bitrate : (Long)bitrate);
      Object minBitrate = map.get("minBitrate");
      fromMapResult.minBitrate = (minBitrate == null) ? null : ((minBitrate instanceof Integer) ? (Integer)minBitrate : (Long)minBitrate);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SubscribeRemoteVideoRequest {
    private Long uid;
    public Long getUid() { return uid; }
    public void setUid(Long setterArg) { this.uid = setterArg; }

    private Long streamType;
    public Long getStreamType() { return streamType; }
    public void setStreamType(Long setterArg) { this.streamType = setterArg; }

    private Boolean subscribe;
    public Boolean getSubscribe() { return subscribe; }
    public void setSubscribe(Boolean setterArg) { this.subscribe = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uid", uid);
      toMapResult.put("streamType", streamType);
      toMapResult.put("subscribe", subscribe);
      return toMapResult;
    }
    static SubscribeRemoteVideoRequest fromMap(Map<String, Object> map) {
      SubscribeRemoteVideoRequest fromMapResult = new SubscribeRemoteVideoRequest();
      Object uid = map.get("uid");
      fromMapResult.uid = (uid == null) ? null : ((uid instanceof Integer) ? (Integer)uid : (Long)uid);
      Object streamType = map.get("streamType");
      fromMapResult.streamType = (streamType == null) ? null : ((streamType instanceof Integer) ? (Integer)streamType : (Long)streamType);
      Object subscribe = map.get("subscribe");
      fromMapResult.subscribe = (Boolean)subscribe;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SubscribeRemoteSubStreamVideoRequest {
    private Long uid;
    public Long getUid() { return uid; }
    public void setUid(Long setterArg) { this.uid = setterArg; }

    private Boolean subscribe;
    public Boolean getSubscribe() { return subscribe; }
    public void setSubscribe(Boolean setterArg) { this.subscribe = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uid", uid);
      toMapResult.put("subscribe", subscribe);
      return toMapResult;
    }
    static SubscribeRemoteSubStreamVideoRequest fromMap(Map<String, Object> map) {
      SubscribeRemoteSubStreamVideoRequest fromMapResult = new SubscribeRemoteSubStreamVideoRequest();
      Object uid = map.get("uid");
      fromMapResult.uid = (uid == null) ? null : ((uid instanceof Integer) ? (Integer)uid : (Long)uid);
      Object subscribe = map.get("subscribe");
      fromMapResult.subscribe = (Boolean)subscribe;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class EnableAudioVolumeIndicationRequest {
    private Boolean enable;
    public Boolean getEnable() { return enable; }
    public void setEnable(Boolean setterArg) { this.enable = setterArg; }

    private Long interval;
    public Long getInterval() { return interval; }
    public void setInterval(Long setterArg) { this.interval = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("enable", enable);
      toMapResult.put("interval", interval);
      return toMapResult;
    }
    static EnableAudioVolumeIndicationRequest fromMap(Map<String, Object> map) {
      EnableAudioVolumeIndicationRequest fromMapResult = new EnableAudioVolumeIndicationRequest();
      Object enable = map.get("enable");
      fromMapResult.enable = (Boolean)enable;
      Object interval = map.get("interval");
      fromMapResult.interval = (interval == null) ? null : ((interval instanceof Integer) ? (Integer)interval : (Long)interval);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AddOrUpdateLiveStreamTaskRequest {
    private Long serial;
    public Long getSerial() { return serial; }
    public void setSerial(Long setterArg) { this.serial = setterArg; }

    private String taskId;
    public String getTaskId() { return taskId; }
    public void setTaskId(String setterArg) { this.taskId = setterArg; }

    private String url;
    public String getUrl() { return url; }
    public void setUrl(String setterArg) { this.url = setterArg; }

    private Boolean serverRecordEnabled;
    public Boolean getServerRecordEnabled() { return serverRecordEnabled; }
    public void setServerRecordEnabled(Boolean setterArg) { this.serverRecordEnabled = setterArg; }

    private Long liveMode;
    public Long getLiveMode() { return liveMode; }
    public void setLiveMode(Long setterArg) { this.liveMode = setterArg; }

    private Long layoutWidth;
    public Long getLayoutWidth() { return layoutWidth; }
    public void setLayoutWidth(Long setterArg) { this.layoutWidth = setterArg; }

    private Long layoutHeight;
    public Long getLayoutHeight() { return layoutHeight; }
    public void setLayoutHeight(Long setterArg) { this.layoutHeight = setterArg; }

    private Long layoutBackgroundColor;
    public Long getLayoutBackgroundColor() { return layoutBackgroundColor; }
    public void setLayoutBackgroundColor(Long setterArg) { this.layoutBackgroundColor = setterArg; }

    private String layoutImageUrl;
    public String getLayoutImageUrl() { return layoutImageUrl; }
    public void setLayoutImageUrl(String setterArg) { this.layoutImageUrl = setterArg; }

    private Long layoutImageX;
    public Long getLayoutImageX() { return layoutImageX; }
    public void setLayoutImageX(Long setterArg) { this.layoutImageX = setterArg; }

    private Long layoutImageY;
    public Long getLayoutImageY() { return layoutImageY; }
    public void setLayoutImageY(Long setterArg) { this.layoutImageY = setterArg; }

    private Long layoutImageWidth;
    public Long getLayoutImageWidth() { return layoutImageWidth; }
    public void setLayoutImageWidth(Long setterArg) { this.layoutImageWidth = setterArg; }

    private Long layoutImageHeight;
    public Long getLayoutImageHeight() { return layoutImageHeight; }
    public void setLayoutImageHeight(Long setterArg) { this.layoutImageHeight = setterArg; }

    private List<Object> layoutUserTranscodingList;
    public List<Object> getLayoutUserTranscodingList() { return layoutUserTranscodingList; }
    public void setLayoutUserTranscodingList(List<Object> setterArg) { this.layoutUserTranscodingList = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("serial", serial);
      toMapResult.put("taskId", taskId);
      toMapResult.put("url", url);
      toMapResult.put("serverRecordEnabled", serverRecordEnabled);
      toMapResult.put("liveMode", liveMode);
      toMapResult.put("layoutWidth", layoutWidth);
      toMapResult.put("layoutHeight", layoutHeight);
      toMapResult.put("layoutBackgroundColor", layoutBackgroundColor);
      toMapResult.put("layoutImageUrl", layoutImageUrl);
      toMapResult.put("layoutImageX", layoutImageX);
      toMapResult.put("layoutImageY", layoutImageY);
      toMapResult.put("layoutImageWidth", layoutImageWidth);
      toMapResult.put("layoutImageHeight", layoutImageHeight);
      toMapResult.put("layoutUserTranscodingList", layoutUserTranscodingList);
      return toMapResult;
    }
    static AddOrUpdateLiveStreamTaskRequest fromMap(Map<String, Object> map) {
      AddOrUpdateLiveStreamTaskRequest fromMapResult = new AddOrUpdateLiveStreamTaskRequest();
      Object serial = map.get("serial");
      fromMapResult.serial = (serial == null) ? null : ((serial instanceof Integer) ? (Integer)serial : (Long)serial);
      Object taskId = map.get("taskId");
      fromMapResult.taskId = (String)taskId;
      Object url = map.get("url");
      fromMapResult.url = (String)url;
      Object serverRecordEnabled = map.get("serverRecordEnabled");
      fromMapResult.serverRecordEnabled = (Boolean)serverRecordEnabled;
      Object liveMode = map.get("liveMode");
      fromMapResult.liveMode = (liveMode == null) ? null : ((liveMode instanceof Integer) ? (Integer)liveMode : (Long)liveMode);
      Object layoutWidth = map.get("layoutWidth");
      fromMapResult.layoutWidth = (layoutWidth == null) ? null : ((layoutWidth instanceof Integer) ? (Integer)layoutWidth : (Long)layoutWidth);
      Object layoutHeight = map.get("layoutHeight");
      fromMapResult.layoutHeight = (layoutHeight == null) ? null : ((layoutHeight instanceof Integer) ? (Integer)layoutHeight : (Long)layoutHeight);
      Object layoutBackgroundColor = map.get("layoutBackgroundColor");
      fromMapResult.layoutBackgroundColor = (layoutBackgroundColor == null) ? null : ((layoutBackgroundColor instanceof Integer) ? (Integer)layoutBackgroundColor : (Long)layoutBackgroundColor);
      Object layoutImageUrl = map.get("layoutImageUrl");
      fromMapResult.layoutImageUrl = (String)layoutImageUrl;
      Object layoutImageX = map.get("layoutImageX");
      fromMapResult.layoutImageX = (layoutImageX == null) ? null : ((layoutImageX instanceof Integer) ? (Integer)layoutImageX : (Long)layoutImageX);
      Object layoutImageY = map.get("layoutImageY");
      fromMapResult.layoutImageY = (layoutImageY == null) ? null : ((layoutImageY instanceof Integer) ? (Integer)layoutImageY : (Long)layoutImageY);
      Object layoutImageWidth = map.get("layoutImageWidth");
      fromMapResult.layoutImageWidth = (layoutImageWidth == null) ? null : ((layoutImageWidth instanceof Integer) ? (Integer)layoutImageWidth : (Long)layoutImageWidth);
      Object layoutImageHeight = map.get("layoutImageHeight");
      fromMapResult.layoutImageHeight = (layoutImageHeight == null) ? null : ((layoutImageHeight instanceof Integer) ? (Integer)layoutImageHeight : (Long)layoutImageHeight);
      Object layoutUserTranscodingList = map.get("layoutUserTranscodingList");
      fromMapResult.layoutUserTranscodingList = (List<Object>)layoutUserTranscodingList;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DeleteLiveStreamTaskRequest {
    private Long serial;
    public Long getSerial() { return serial; }
    public void setSerial(Long setterArg) { this.serial = setterArg; }

    private String taskId;
    public String getTaskId() { return taskId; }
    public void setTaskId(String setterArg) { this.taskId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("serial", serial);
      toMapResult.put("taskId", taskId);
      return toMapResult;
    }
    static DeleteLiveStreamTaskRequest fromMap(Map<String, Object> map) {
      DeleteLiveStreamTaskRequest fromMapResult = new DeleteLiveStreamTaskRequest();
      Object serial = map.get("serial");
      fromMapResult.serial = (serial == null) ? null : ((serial instanceof Integer) ? (Integer)serial : (Long)serial);
      Object taskId = map.get("taskId");
      fromMapResult.taskId = (String)taskId;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SendSEIMsgRequest {
    private String seiMsg;
    public String getSeiMsg() { return seiMsg; }
    public void setSeiMsg(String setterArg) { this.seiMsg = setterArg; }

    private Long streamType;
    public Long getStreamType() { return streamType; }
    public void setStreamType(Long setterArg) { this.streamType = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("seiMsg", seiMsg);
      toMapResult.put("streamType", streamType);
      return toMapResult;
    }
    static SendSEIMsgRequest fromMap(Map<String, Object> map) {
      SendSEIMsgRequest fromMapResult = new SendSEIMsgRequest();
      Object seiMsg = map.get("seiMsg");
      fromMapResult.seiMsg = (String)seiMsg;
      Object streamType = map.get("streamType");
      fromMapResult.streamType = (streamType == null) ? null : ((streamType instanceof Integer) ? (Integer)streamType : (Long)streamType);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetLocalVoiceEqualizationRequest {
    private Long bandFrequency;
    public Long getBandFrequency() { return bandFrequency; }
    public void setBandFrequency(Long setterArg) { this.bandFrequency = setterArg; }

    private Long bandGain;
    public Long getBandGain() { return bandGain; }
    public void setBandGain(Long setterArg) { this.bandGain = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("bandFrequency", bandFrequency);
      toMapResult.put("bandGain", bandGain);
      return toMapResult;
    }
    static SetLocalVoiceEqualizationRequest fromMap(Map<String, Object> map) {
      SetLocalVoiceEqualizationRequest fromMapResult = new SetLocalVoiceEqualizationRequest();
      Object bandFrequency = map.get("bandFrequency");
      fromMapResult.bandFrequency = (bandFrequency == null) ? null : ((bandFrequency instanceof Integer) ? (Integer)bandFrequency : (Long)bandFrequency);
      Object bandGain = map.get("bandGain");
      fromMapResult.bandGain = (bandGain == null) ? null : ((bandGain instanceof Integer) ? (Integer)bandGain : (Long)bandGain);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SwitchChannelRequest {
    private String token;
    public String getToken() { return token; }
    public void setToken(String setterArg) { this.token = setterArg; }

    private String channelName;
    public String getChannelName() { return channelName; }
    public void setChannelName(String setterArg) { this.channelName = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("token", token);
      toMapResult.put("channelName", channelName);
      return toMapResult;
    }
    static SwitchChannelRequest fromMap(Map<String, Object> map) {
      SwitchChannelRequest fromMapResult = new SwitchChannelRequest();
      Object token = map.get("token");
      fromMapResult.token = (String)token;
      Object channelName = map.get("channelName");
      fromMapResult.channelName = (String)channelName;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StartAudioRecordingRequest {
    private String filePath;
    public String getFilePath() { return filePath; }
    public void setFilePath(String setterArg) { this.filePath = setterArg; }

    private Long sampleRate;
    public Long getSampleRate() { return sampleRate; }
    public void setSampleRate(Long setterArg) { this.sampleRate = setterArg; }

    private Long quality;
    public Long getQuality() { return quality; }
    public void setQuality(Long setterArg) { this.quality = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("filePath", filePath);
      toMapResult.put("sampleRate", sampleRate);
      toMapResult.put("quality", quality);
      return toMapResult;
    }
    static StartAudioRecordingRequest fromMap(Map<String, Object> map) {
      StartAudioRecordingRequest fromMapResult = new StartAudioRecordingRequest();
      Object filePath = map.get("filePath");
      fromMapResult.filePath = (String)filePath;
      Object sampleRate = map.get("sampleRate");
      fromMapResult.sampleRate = (sampleRate == null) ? null : ((sampleRate instanceof Integer) ? (Integer)sampleRate : (Long)sampleRate);
      Object quality = map.get("quality");
      fromMapResult.quality = (quality == null) ? null : ((quality instanceof Integer) ? (Integer)quality : (Long)quality);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetLocalMediaPriorityRequest {
    private Long priority;
    public Long getPriority() { return priority; }
    public void setPriority(Long setterArg) { this.priority = setterArg; }

    private Boolean isPreemptive;
    public Boolean getIsPreemptive() { return isPreemptive; }
    public void setIsPreemptive(Boolean setterArg) { this.isPreemptive = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("priority", priority);
      toMapResult.put("isPreemptive", isPreemptive);
      return toMapResult;
    }
    static SetLocalMediaPriorityRequest fromMap(Map<String, Object> map) {
      SetLocalMediaPriorityRequest fromMapResult = new SetLocalMediaPriorityRequest();
      Object priority = map.get("priority");
      fromMapResult.priority = (priority == null) ? null : ((priority instanceof Integer) ? (Integer)priority : (Long)priority);
      Object isPreemptive = map.get("isPreemptive");
      fromMapResult.isPreemptive = (Boolean)isPreemptive;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StartOrUpdateChannelMediaReplayRequest {
    private Map<Object, Object> sourceMediaInfo;
    public Map<Object, Object> getSourceMediaInfo() { return sourceMediaInfo; }
    public void setSourceMediaInfo(Map<Object, Object> setterArg) { this.sourceMediaInfo = setterArg; }

    private Map<Object, Object> destMediaInfo;
    public Map<Object, Object> getDestMediaInfo() { return destMediaInfo; }
    public void setDestMediaInfo(Map<Object, Object> setterArg) { this.destMediaInfo = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sourceMediaInfo", sourceMediaInfo);
      toMapResult.put("destMediaInfo", destMediaInfo);
      return toMapResult;
    }
    static StartOrUpdateChannelMediaReplayRequest fromMap(Map<String, Object> map) {
      StartOrUpdateChannelMediaReplayRequest fromMapResult = new StartOrUpdateChannelMediaReplayRequest();
      Object sourceMediaInfo = map.get("sourceMediaInfo");
      fromMapResult.sourceMediaInfo = (Map<Object, Object>)sourceMediaInfo;
      Object destMediaInfo = map.get("destMediaInfo");
      fromMapResult.destMediaInfo = (Map<Object, Object>)destMediaInfo;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AdjustUserPlaybackSignalVolumeRequest {
    private Long uid;
    public Long getUid() { return uid; }
    public void setUid(Long setterArg) { this.uid = setterArg; }

    private Long volume;
    public Long getVolume() { return volume; }
    public void setVolume(Long setterArg) { this.volume = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uid", uid);
      toMapResult.put("volume", volume);
      return toMapResult;
    }
    static AdjustUserPlaybackSignalVolumeRequest fromMap(Map<String, Object> map) {
      AdjustUserPlaybackSignalVolumeRequest fromMapResult = new AdjustUserPlaybackSignalVolumeRequest();
      Object uid = map.get("uid");
      fromMapResult.uid = (uid == null) ? null : ((uid instanceof Integer) ? (Integer)uid : (Long)uid);
      Object volume = map.get("volume");
      fromMapResult.volume = (volume == null) ? null : ((volume instanceof Integer) ? (Integer)volume : (Long)volume);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class EnableEncryptionRequest {
    private String key;
    public String getKey() { return key; }
    public void setKey(String setterArg) { this.key = setterArg; }

    private Long mode;
    public Long getMode() { return mode; }
    public void setMode(Long setterArg) { this.mode = setterArg; }

    private Boolean enable;
    public Boolean getEnable() { return enable; }
    public void setEnable(Boolean setterArg) { this.enable = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("key", key);
      toMapResult.put("mode", mode);
      toMapResult.put("enable", enable);
      return toMapResult;
    }
    static EnableEncryptionRequest fromMap(Map<String, Object> map) {
      EnableEncryptionRequest fromMapResult = new EnableEncryptionRequest();
      Object key = map.get("key");
      fromMapResult.key = (String)key;
      Object mode = map.get("mode");
      fromMapResult.mode = (mode == null) ? null : ((mode instanceof Integer) ? (Integer)mode : (Long)mode);
      Object enable = map.get("enable");
      fromMapResult.enable = (Boolean)enable;
      return fromMapResult;
    }
  }

  public interface Result<T> {
    void success(T result);
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface VideoRendererApi {
    IntValue createVideoRenderer();
    IntValue setMirror(SetVideoRendererMirrorRequest arg);
    IntValue setupLocalVideoRenderer(IntValue arg);
    IntValue setupRemoteVideoRenderer(SetupRemoteVideoRendererRequest arg);
    IntValue setupLocalSubStreamVideoRenderer(IntValue arg);
    IntValue setupRemoteSubStreamVideoRenderer(SetupRemoteSubStreamVideoRendererRequest arg);
    void disposeVideoRenderer(IntValue arg);

    /** Sets up an instance of `VideoRendererApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, VideoRendererApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoRendererApi.createVideoRenderer", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.createVideoRenderer();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoRendererApi.setMirror", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetVideoRendererMirrorRequest input = SetVideoRendererMirrorRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.setMirror(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoRendererApi.setupLocalVideoRenderer", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setupLocalVideoRenderer(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoRendererApi.setupRemoteVideoRenderer", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetupRemoteVideoRendererRequest input = SetupRemoteVideoRendererRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.setupRemoteVideoRenderer(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoRendererApi.setupLocalSubStreamVideoRenderer", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setupLocalSubStreamVideoRenderer(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoRendererApi.setupRemoteSubStreamVideoRenderer", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetupRemoteSubStreamVideoRendererRequest input = SetupRemoteSubStreamVideoRendererRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.setupRemoteSubStreamVideoRenderer(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoRendererApi.disposeVideoRenderer", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              api.disposeVideoRenderer(input);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AudioMixingApi {
    IntValue setAudioMixingEventCallback();
    IntValue clearAudioMixingEventCallback();
    IntValue startAudioMixing(StartAudioMixingRequest arg);
    IntValue stopAudioMixing();
    IntValue pauseAudioMixing();
    IntValue resumeAudioMixing();
    IntValue setAudioMixingSendVolume(IntValue arg);
    IntValue getAudioMixingSendVolume();
    IntValue setAudioMixingPlaybackVolume(IntValue arg);
    IntValue getAudioMixingPlaybackVolume();
    IntValue getAudioMixingDuration();
    IntValue getAudioMixingCurrentPosition();
    IntValue setAudioMixingPosition(IntValue arg);

    /** Sets up an instance of `AudioMixingApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AudioMixingApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioMixingApi.setAudioMixingEventCallback", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.setAudioMixingEventCallback();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioMixingApi.clearAudioMixingEventCallback", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.clearAudioMixingEventCallback();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioMixingApi.startAudioMixing", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StartAudioMixingRequest input = StartAudioMixingRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.startAudioMixing(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioMixingApi.stopAudioMixing", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.stopAudioMixing();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioMixingApi.pauseAudioMixing", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.pauseAudioMixing();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioMixingApi.resumeAudioMixing", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.resumeAudioMixing();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioMixingApi.setAudioMixingSendVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setAudioMixingSendVolume(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioMixingApi.getAudioMixingSendVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.getAudioMixingSendVolume();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioMixingApi.setAudioMixingPlaybackVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setAudioMixingPlaybackVolume(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioMixingApi.getAudioMixingPlaybackVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.getAudioMixingPlaybackVolume();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioMixingApi.getAudioMixingDuration", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.getAudioMixingDuration();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioMixingApi.getAudioMixingCurrentPosition", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.getAudioMixingCurrentPosition();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioMixingApi.setAudioMixingPosition", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setAudioMixingPosition(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AudioEffectApi {
    IntValue setAudioEffectEventCallback();
    IntValue clearAudioEffectEventCallback();
    IntValue playEffect(PlayEffectRequest arg);
    IntValue stopEffect(IntValue arg);
    IntValue stopAllEffects();
    IntValue pauseEffect(IntValue arg);
    IntValue resumeEffect(IntValue arg);
    IntValue pauseAllEffects();
    IntValue resumeAllEffects();
    IntValue setEffectSendVolume(SetEffectSendVolumeRequest arg);
    IntValue getEffectSendVolume(IntValue arg);
    IntValue setEffectPlaybackVolume(SetEffectPlaybackVolumeRequest arg);
    IntValue getEffectPlaybackVolume(IntValue arg);
    IntValue getEffectDuration(IntValue arg);
    IntValue getEffectCurrentPosition(IntValue arg);

    /** Sets up an instance of `AudioEffectApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AudioEffectApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioEffectApi.setAudioEffectEventCallback", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.setAudioEffectEventCallback();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioEffectApi.clearAudioEffectEventCallback", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.clearAudioEffectEventCallback();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioEffectApi.playEffect", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              PlayEffectRequest input = PlayEffectRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.playEffect(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioEffectApi.stopEffect", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.stopEffect(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioEffectApi.stopAllEffects", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.stopAllEffects();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioEffectApi.pauseEffect", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.pauseEffect(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioEffectApi.resumeEffect", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.resumeEffect(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioEffectApi.pauseAllEffects", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.pauseAllEffects();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioEffectApi.resumeAllEffects", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.resumeAllEffects();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioEffectApi.setEffectSendVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetEffectSendVolumeRequest input = SetEffectSendVolumeRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.setEffectSendVolume(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioEffectApi.getEffectSendVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.getEffectSendVolume(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioEffectApi.setEffectPlaybackVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetEffectPlaybackVolumeRequest input = SetEffectPlaybackVolumeRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.setEffectPlaybackVolume(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioEffectApi.getEffectPlaybackVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.getEffectPlaybackVolume(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioEffectApi.getEffectDuration", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.getEffectDuration(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AudioEffectApi.getEffectCurrentPosition", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.getEffectCurrentPosition(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface DeviceManagerApi {
    IntValue setDeviceEventCallback();
    IntValue clearDeviceEventCallback();
    BoolValue isSpeakerphoneOn();
    IntValue setSpeakerphoneOn(BoolValue arg);
    IntValue switchCamera();
    IntValue setCameraZoomFactor(IntValue arg);
    DoubleValue getCameraMaxZoom();
    IntValue setCameraTorchOn(BoolValue arg);
    IntValue setCameraFocusPosition(SetCameraFocusPositionRequest arg);
    IntValue setPlayoutDeviceMute(BoolValue arg);
    BoolValue isPlayoutDeviceMute();
    IntValue setRecordDeviceMute(BoolValue arg);
    BoolValue isRecordDeviceMute();
    IntValue enableEarback(EnableEarbackRequest arg);
    IntValue setEarbackVolume(IntValue arg);
    IntValue setAudioFocusMode(IntValue arg);

    /** Sets up an instance of `DeviceManagerApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, DeviceManagerApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.setDeviceEventCallback", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.setDeviceEventCallback();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.clearDeviceEventCallback", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.clearDeviceEventCallback();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.isSpeakerphoneOn", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              BoolValue output = api.isSpeakerphoneOn();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.setSpeakerphoneOn", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              BoolValue input = BoolValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setSpeakerphoneOn(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.switchCamera", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.switchCamera();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.setCameraZoomFactor", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setCameraZoomFactor(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.getCameraMaxZoom", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              DoubleValue output = api.getCameraMaxZoom();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.setCameraTorchOn", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              BoolValue input = BoolValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setCameraTorchOn(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.setCameraFocusPosition", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetCameraFocusPositionRequest input = SetCameraFocusPositionRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.setCameraFocusPosition(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.setPlayoutDeviceMute", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              BoolValue input = BoolValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setPlayoutDeviceMute(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.isPlayoutDeviceMute", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              BoolValue output = api.isPlayoutDeviceMute();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.setRecordDeviceMute", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              BoolValue input = BoolValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setRecordDeviceMute(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.isRecordDeviceMute", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              BoolValue output = api.isRecordDeviceMute();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.enableEarback", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              EnableEarbackRequest input = EnableEarbackRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.enableEarback(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.setEarbackVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setEarbackVolume(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DeviceManagerApi.setAudioFocusMode", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setAudioFocusMode(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface EngineApi {
    IntValue create(CreateEngineRequest arg);
    void release(Result<IntValue> result);
    IntValue setStatsEventCallback();
    IntValue clearStatsEventCallback();
    IntValue setChannelProfile(IntValue arg);
    IntValue joinChannel(JoinChannelRequest arg);
    IntValue leaveChannel();
    IntValue enableLocalAudio(BoolValue arg);
    IntValue subscribeRemoteAudio(SubscribeRemoteAudioRequest arg);
    IntValue subscribeAllRemoteAudio(BoolValue arg);
    IntValue setAudioProfile(SetAudioProfileRequest arg);
    IntValue enableDualStreamMode(BoolValue arg);
    IntValue setLocalVideoConfig(SetLocalVideoConfigRequest arg);
    IntValue startVideoPreview();
    IntValue stopVideoPreview();
    IntValue enableLocalVideo(BoolValue arg);
    void startScreenCapture(StartScreenCaptureRequest arg, Result<IntValue> result);
    IntValue stopScreenCapture();
    IntValue subscribeRemoteVideo(SubscribeRemoteVideoRequest arg);
    IntValue subscribeRemoteSubStreamVideo(SubscribeRemoteSubStreamVideoRequest arg);
    IntValue muteLocalAudioStream(BoolValue arg);
    IntValue muteLocalVideoStream(BoolValue arg);
    IntValue startAudioDump();
    IntValue stopAudioDump();
    IntValue enableAudioVolumeIndication(EnableAudioVolumeIndicationRequest arg);
    IntValue adjustRecordingSignalVolume(IntValue arg);
    IntValue adjustPlaybackSignalVolume(IntValue arg);
    IntValue addLiveStreamTask(AddOrUpdateLiveStreamTaskRequest arg);
    IntValue updateLiveStreamTask(AddOrUpdateLiveStreamTaskRequest arg);
    IntValue removeLiveStreamTask(DeleteLiveStreamTaskRequest arg);
    IntValue setClientRole(IntValue arg);
    IntValue getConnectionState();
    IntValue uploadSdkInfo();
    IntValue sendSEIMsg(SendSEIMsgRequest arg);
    IntValue setAudioEffectPreset(IntValue arg);
    IntValue setVoiceBeautifierPreset(IntValue arg);
    IntValue setLocalVoicePitch(DoubleValue arg);
    IntValue setLocalVoiceEqualization(SetLocalVoiceEqualizationRequest arg);
    IntValue switchChannel(SwitchChannelRequest arg);
    IntValue startAudioRecording(StartAudioRecordingRequest arg);
    IntValue stopAudioRecording();
    IntValue setLocalMediaPriority(SetLocalMediaPriorityRequest arg);
    IntValue startChannelMediaReplay(StartOrUpdateChannelMediaReplayRequest arg);
    IntValue updateChannelMediaRelay(StartOrUpdateChannelMediaReplayRequest arg);
    IntValue stopChannelMediaRelay();
    IntValue adjustUserPlaybackSignalVolume(AdjustUserPlaybackSignalVolumeRequest arg);
    IntValue setLocalPublishFallbackOption(IntValue arg);
    IntValue setRemoteSubscribeFallbackOption(IntValue arg);
    IntValue enableSuperResolution(BoolValue arg);
    IntValue enableEncryption(EnableEncryptionRequest arg);

    /** Sets up an instance of `EngineApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, EngineApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.create", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              CreateEngineRequest input = CreateEngineRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.create(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.release", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.release(result -> { wrapped.put("result", result.toMap()); reply.reply(wrapped); });
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.setStatsEventCallback", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.setStatsEventCallback();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.clearStatsEventCallback", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.clearStatsEventCallback();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.setChannelProfile", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setChannelProfile(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.joinChannel", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              JoinChannelRequest input = JoinChannelRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.joinChannel(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.leaveChannel", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.leaveChannel();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.enableLocalAudio", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              BoolValue input = BoolValue.fromMap((Map<String, Object>)message);
              IntValue output = api.enableLocalAudio(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.subscribeRemoteAudio", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SubscribeRemoteAudioRequest input = SubscribeRemoteAudioRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.subscribeRemoteAudio(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.subscribeAllRemoteAudio", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              BoolValue input = BoolValue.fromMap((Map<String, Object>)message);
              IntValue output = api.subscribeAllRemoteAudio(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.setAudioProfile", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetAudioProfileRequest input = SetAudioProfileRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.setAudioProfile(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.enableDualStreamMode", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              BoolValue input = BoolValue.fromMap((Map<String, Object>)message);
              IntValue output = api.enableDualStreamMode(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.setLocalVideoConfig", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetLocalVideoConfigRequest input = SetLocalVideoConfigRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.setLocalVideoConfig(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.startVideoPreview", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.startVideoPreview();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.stopVideoPreview", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.stopVideoPreview();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.enableLocalVideo", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              BoolValue input = BoolValue.fromMap((Map<String, Object>)message);
              IntValue output = api.enableLocalVideo(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.startScreenCapture", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StartScreenCaptureRequest input = StartScreenCaptureRequest.fromMap((Map<String, Object>)message);
              api.startScreenCapture(input, result -> { wrapped.put("result", result.toMap()); reply.reply(wrapped); });
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.stopScreenCapture", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.stopScreenCapture();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.subscribeRemoteVideo", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SubscribeRemoteVideoRequest input = SubscribeRemoteVideoRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.subscribeRemoteVideo(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.subscribeRemoteSubStreamVideo", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SubscribeRemoteSubStreamVideoRequest input = SubscribeRemoteSubStreamVideoRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.subscribeRemoteSubStreamVideo(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.muteLocalAudioStream", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              BoolValue input = BoolValue.fromMap((Map<String, Object>)message);
              IntValue output = api.muteLocalAudioStream(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.muteLocalVideoStream", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              BoolValue input = BoolValue.fromMap((Map<String, Object>)message);
              IntValue output = api.muteLocalVideoStream(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.startAudioDump", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.startAudioDump();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.stopAudioDump", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.stopAudioDump();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.enableAudioVolumeIndication", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              EnableAudioVolumeIndicationRequest input = EnableAudioVolumeIndicationRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.enableAudioVolumeIndication(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.adjustRecordingSignalVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.adjustRecordingSignalVolume(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.adjustPlaybackSignalVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.adjustPlaybackSignalVolume(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.addLiveStreamTask", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              AddOrUpdateLiveStreamTaskRequest input = AddOrUpdateLiveStreamTaskRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.addLiveStreamTask(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.updateLiveStreamTask", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              AddOrUpdateLiveStreamTaskRequest input = AddOrUpdateLiveStreamTaskRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.updateLiveStreamTask(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.removeLiveStreamTask", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              DeleteLiveStreamTaskRequest input = DeleteLiveStreamTaskRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.removeLiveStreamTask(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.setClientRole", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setClientRole(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.getConnectionState", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.getConnectionState();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.uploadSdkInfo", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.uploadSdkInfo();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.sendSEIMsg", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SendSEIMsgRequest input = SendSEIMsgRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.sendSEIMsg(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.setAudioEffectPreset", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setAudioEffectPreset(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.setVoiceBeautifierPreset", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setVoiceBeautifierPreset(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.setLocalVoicePitch", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              DoubleValue input = DoubleValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setLocalVoicePitch(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.setLocalVoiceEqualization", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetLocalVoiceEqualizationRequest input = SetLocalVoiceEqualizationRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.setLocalVoiceEqualization(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.switchChannel", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SwitchChannelRequest input = SwitchChannelRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.switchChannel(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.startAudioRecording", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StartAudioRecordingRequest input = StartAudioRecordingRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.startAudioRecording(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.stopAudioRecording", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.stopAudioRecording();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.setLocalMediaPriority", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SetLocalMediaPriorityRequest input = SetLocalMediaPriorityRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.setLocalMediaPriority(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.startChannelMediaReplay", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StartOrUpdateChannelMediaReplayRequest input = StartOrUpdateChannelMediaReplayRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.startChannelMediaReplay(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.updateChannelMediaRelay", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StartOrUpdateChannelMediaReplayRequest input = StartOrUpdateChannelMediaReplayRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.updateChannelMediaRelay(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.stopChannelMediaRelay", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              IntValue output = api.stopChannelMediaRelay();
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.adjustUserPlaybackSignalVolume", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              AdjustUserPlaybackSignalVolumeRequest input = AdjustUserPlaybackSignalVolumeRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.adjustUserPlaybackSignalVolume(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.setLocalPublishFallbackOption", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setLocalPublishFallbackOption(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.setRemoteSubscribeFallbackOption", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              IntValue input = IntValue.fromMap((Map<String, Object>)message);
              IntValue output = api.setRemoteSubscribeFallbackOption(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.enableSuperResolution", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              BoolValue input = BoolValue.fromMap((Map<String, Object>)message);
              IntValue output = api.enableSuperResolution(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.EngineApi.enableEncryption", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              EnableEncryptionRequest input = EnableEncryptionRequest.fromMap((Map<String, Object>)message);
              IntValue output = api.enableEncryption(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
